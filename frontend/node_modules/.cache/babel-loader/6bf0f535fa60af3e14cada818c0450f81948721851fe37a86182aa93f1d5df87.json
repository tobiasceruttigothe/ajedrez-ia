{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2025, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nimport { parse } from './pgn';\nconst MASK64 = 0xffffffffffffffffn;\nfunction rotl(x, k) {\n  return (x << k | x >> 64n - k) & 0xffffffffffffffffn;\n}\nfunction wrappingMul(x, y) {\n  return x * y & MASK64;\n}\n// xoroshiro128**\nexport function xoroshiro128(state) {\n  return function () {\n    let s0 = BigInt(state & MASK64);\n    let s1 = BigInt(state >> 64n & MASK64);\n    const result = wrappingMul(rotl(wrappingMul(s0, 5n), 7n), 9n);\n    s1 ^= s0;\n    s0 = (rotl(s0, 24n) ^ s1 ^ s1 << 16n) & MASK64;\n    s1 = rotl(s1, 37n);\n    state = s1 << 64n | s0;\n    return result;\n  };\n}\nconst rand = xoroshiro128(0xa187eb39cdcaed8f31c4b365b102e01en);\nconst PIECE_KEYS = Array.from({\n  length: 2\n}, () => Array.from({\n  length: 6\n}, () => Array.from({\n  length: 128\n}, () => rand())));\nconst EP_KEYS = Array.from({\n  length: 8\n}, () => rand());\nconst CASTLING_KEYS = Array.from({\n  length: 16\n}, () => rand());\nconst SIDE_KEY = rand();\nexport const WHITE = 'w';\nexport const BLACK = 'b';\nexport const PAWN = 'p';\nexport const KNIGHT = 'n';\nexport const BISHOP = 'b';\nexport const ROOK = 'r';\nexport const QUEEN = 'q';\nexport const KING = 'k';\nexport const DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\nexport class Move {\n  color;\n  from;\n  to;\n  piece;\n  captured;\n  promotion;\n  /**\n   * @deprecated This field is deprecated and will be removed in version 2.0.0.\n   * Please use move descriptor functions instead: `isCapture`, `isPromotion`,\n   * `isEnPassant`, `isKingsideCastle`, `isQueensideCastle`, `isCastle`, and\n   * `isBigPawn`\n   */\n  flags;\n  san;\n  lan;\n  before;\n  after;\n  constructor(chess, internal) {\n    const {\n      color,\n      piece,\n      from,\n      to,\n      flags,\n      captured,\n      promotion\n    } = internal;\n    const fromAlgebraic = algebraic(from);\n    const toAlgebraic = algebraic(to);\n    this.color = color;\n    this.piece = piece;\n    this.from = fromAlgebraic;\n    this.to = toAlgebraic;\n    /*\n     * HACK: The chess['_method']() calls below invoke private methods in the\n     * Chess class to generate SAN and FEN. It's a bit of a hack, but makes the\n     * code cleaner elsewhere.\n     */\n    this.san = chess['_moveToSan'](internal, chess['_moves']({\n      legal: true\n    }));\n    this.lan = fromAlgebraic + toAlgebraic;\n    this.before = chess.fen();\n    // Generate the FEN for the 'after' key\n    chess['_makeMove'](internal);\n    this.after = chess.fen();\n    chess['_undoMove']();\n    // Build the text representation of the move flags\n    this.flags = '';\n    for (const flag in BITS) {\n      if (BITS[flag] & flags) {\n        this.flags += FLAGS[flag];\n      }\n    }\n    if (captured) {\n      this.captured = captured;\n    }\n    if (promotion) {\n      this.promotion = promotion;\n      this.lan += promotion;\n    }\n  }\n  isCapture() {\n    return this.flags.indexOf(FLAGS['CAPTURE']) > -1;\n  }\n  isPromotion() {\n    return this.flags.indexOf(FLAGS['PROMOTION']) > -1;\n  }\n  isEnPassant() {\n    return this.flags.indexOf(FLAGS['EP_CAPTURE']) > -1;\n  }\n  isKingsideCastle() {\n    return this.flags.indexOf(FLAGS['KSIDE_CASTLE']) > -1;\n  }\n  isQueensideCastle() {\n    return this.flags.indexOf(FLAGS['QSIDE_CASTLE']) > -1;\n  }\n  isBigPawn() {\n    return this.flags.indexOf(FLAGS['BIG_PAWN']) > -1;\n  }\n}\nconst EMPTY = -1;\nconst FLAGS = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q'\n};\n// prettier-ignore\nexport const SQUARES = ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', 'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', 'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', 'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', 'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', 'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', 'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', 'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'];\nconst BITS = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64\n};\n/* eslint-disable @typescript-eslint/naming-convention */\n// these are required, according to spec\nexport const SEVEN_TAG_ROSTER = {\n  Event: '?',\n  Site: '?',\n  Date: '????.??.??',\n  Round: '?',\n  White: '?',\n  Black: '?',\n  Result: '*'\n};\n/**\n * These nulls are placeholders to fix the order of tags (as they appear in PGN spec); null values will be\n * eliminated in getHeaders()\n */\nconst SUPLEMENTAL_TAGS = {\n  WhiteTitle: null,\n  BlackTitle: null,\n  WhiteElo: null,\n  BlackElo: null,\n  WhiteUSCF: null,\n  BlackUSCF: null,\n  WhiteNA: null,\n  BlackNA: null,\n  WhiteType: null,\n  BlackType: null,\n  EventDate: null,\n  EventSponsor: null,\n  Section: null,\n  Stage: null,\n  Board: null,\n  Opening: null,\n  Variation: null,\n  SubVariation: null,\n  ECO: null,\n  NIC: null,\n  Time: null,\n  UTCTime: null,\n  UTCDate: null,\n  TimeControl: null,\n  SetUp: null,\n  FEN: null,\n  Termination: null,\n  Annotator: null,\n  Mode: null,\n  PlyCount: null\n};\nconst HEADER_TEMPLATE = {\n  ...SEVEN_TAG_ROSTER,\n  ...SUPLEMENTAL_TAGS\n};\n/* eslint-enable @typescript-eslint/naming-convention */\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88 = {\n  a8: 0,\n  b8: 1,\n  c8: 2,\n  d8: 3,\n  e8: 4,\n  f8: 5,\n  g8: 6,\n  h8: 7,\n  a7: 16,\n  b7: 17,\n  c7: 18,\n  d7: 19,\n  e7: 20,\n  f7: 21,\n  g7: 22,\n  h7: 23,\n  a6: 32,\n  b6: 33,\n  c6: 34,\n  d6: 35,\n  e6: 36,\n  f6: 37,\n  g6: 38,\n  h6: 39,\n  a5: 48,\n  b5: 49,\n  c5: 50,\n  d5: 51,\n  e5: 52,\n  f5: 53,\n  g5: 54,\n  h5: 55,\n  a4: 64,\n  b4: 65,\n  c4: 66,\n  d4: 67,\n  e4: 68,\n  f4: 69,\n  g4: 70,\n  h4: 71,\n  a3: 80,\n  b3: 81,\n  c3: 82,\n  d3: 83,\n  e3: 84,\n  f3: 85,\n  g3: 86,\n  h3: 87,\n  a2: 96,\n  b2: 97,\n  c2: 98,\n  d2: 99,\n  e2: 100,\n  f2: 101,\n  g2: 102,\n  h2: 103,\n  a1: 112,\n  b1: 113,\n  c1: 114,\n  d1: 115,\n  e1: 116,\n  f1: 117,\n  g1: 118,\n  h1: 119\n};\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15]\n};\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1]\n};\n// prettier-ignore\nconst ATTACKS = [20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20];\n// prettier-ignore\nconst RAYS = [17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0, 0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0, -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17];\nconst PIECE_MASKS = {\n  p: 0x1,\n  n: 0x2,\n  b: 0x4,\n  r: 0x8,\n  q: 0x10,\n  k: 0x20\n};\nconst SYMBOLS = 'pnbrqkPNBRQK';\nconst PROMOTIONS = [KNIGHT, BISHOP, ROOK, QUEEN];\nconst RANK_1 = 7;\nconst RANK_2 = 6;\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1;\nconst RANK_8 = 0;\nconst SIDES = {\n  [KING]: BITS.KSIDE_CASTLE,\n  [QUEEN]: BITS.QSIDE_CASTLE\n};\nconst ROOKS = {\n  w: [{\n    square: Ox88.a1,\n    flag: BITS.QSIDE_CASTLE\n  }, {\n    square: Ox88.h1,\n    flag: BITS.KSIDE_CASTLE\n  }],\n  b: [{\n    square: Ox88.a8,\n    flag: BITS.QSIDE_CASTLE\n  }, {\n    square: Ox88.h8,\n    flag: BITS.KSIDE_CASTLE\n  }]\n};\nconst SECOND_RANK = {\n  b: RANK_7,\n  w: RANK_2\n};\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square) {\n  return square >> 4;\n}\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square) {\n  return square & 0xf;\n}\nfunction isDigit(c) {\n  return '0123456789'.indexOf(c) !== -1;\n}\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square) {\n  const f = file(square);\n  const r = rank(square);\n  return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1);\n}\nfunction swapColor(color) {\n  return color === WHITE ? BLACK : WHITE;\n}\nexport function validateFen(fen) {\n  // 1st criterion: 6 space-seperated fields?\n  const tokens = fen.split(/\\s+/);\n  if (tokens.length !== 6) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: must contain six space-delimited fields'\n    };\n  }\n  // 2nd criterion: move number field is a integer value > 0?\n  const moveNumber = parseInt(tokens[5], 10);\n  if (isNaN(moveNumber) || moveNumber <= 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: move number must be a positive integer'\n    };\n  }\n  // 3rd criterion: half move counter is an integer >= 0?\n  const halfMoves = parseInt(tokens[4], 10);\n  if (isNaN(halfMoves) || halfMoves < 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: half move counter number must be a non-negative integer'\n    };\n  }\n  // 4th criterion: 4th field is a valid e.p.-string?\n  if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: en-passant square is invalid'\n    };\n  }\n  // 5th criterion: 3th field is a valid castle-string?\n  if (/[^kKqQ-]/.test(tokens[2])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: castling availability is invalid'\n    };\n  }\n  // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n  if (!/^(w|b)$/.test(tokens[1])) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: side-to-move is invalid'\n    };\n  }\n  // 7th criterion: 1st field contains 8 rows?\n  const rows = tokens[0].split('/');\n  if (rows.length !== 8) {\n    return {\n      ok: false,\n      error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\"\n    };\n  }\n  // 8th criterion: every row is valid?\n  for (let i = 0; i < rows.length; i++) {\n    // check for right sum of fields AND not two numbers in succession\n    let sumFields = 0;\n    let previousWasNumber = false;\n    for (let k = 0; k < rows[i].length; k++) {\n      if (isDigit(rows[i][k])) {\n        if (previousWasNumber) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (consecutive number)'\n          };\n        }\n        sumFields += parseInt(rows[i][k], 10);\n        previousWasNumber = true;\n      } else {\n        if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (invalid piece)'\n          };\n        }\n        sumFields += 1;\n        previousWasNumber = false;\n      }\n    }\n    if (sumFields !== 8) {\n      return {\n        ok: false,\n        error: 'Invalid FEN: piece data is invalid (too many squares in rank)'\n      };\n    }\n  }\n  // 9th criterion: is en-passant square legal?\n  if (tokens[3][1] == '3' && tokens[1] == 'w' || tokens[3][1] == '6' && tokens[1] == 'b') {\n    return {\n      ok: false,\n      error: 'Invalid FEN: illegal en-passant square'\n    };\n  }\n  // 10th criterion: does chess position contain exact two kings?\n  const kings = [{\n    color: 'white',\n    regex: /K/g\n  }, {\n    color: 'black',\n    regex: /k/g\n  }];\n  for (const {\n    color,\n    regex\n  } of kings) {\n    if (!regex.test(tokens[0])) {\n      return {\n        ok: false,\n        error: `Invalid FEN: missing ${color} king`\n      };\n    }\n    if ((tokens[0].match(regex) || []).length > 1) {\n      return {\n        ok: false,\n        error: `Invalid FEN: too many ${color} kings`\n      };\n    }\n  }\n  // 11th criterion: are any pawns on the first or eighth rows?\n  if (Array.from(rows[0] + rows[7]).some(char => char.toUpperCase() === 'P')) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: some pawns are on the edge rows'\n    };\n  }\n  return {\n    ok: true\n  };\n}\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move, moves) {\n  const from = move.from;\n  const to = move.to;\n  const piece = move.piece;\n  let ambiguities = 0;\n  let sameRank = 0;\n  let sameFile = 0;\n  for (let i = 0, len = moves.length; i < len; i++) {\n    const ambigFrom = moves[i].from;\n    const ambigTo = moves[i].to;\n    const ambigPiece = moves[i].piece;\n    /*\n     * if a move of the same piece type ends on the same to square, we'll need\n     * to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n      ambiguities++;\n      if (rank(from) === rank(ambigFrom)) {\n        sameRank++;\n      }\n      if (file(from) === file(ambigFrom)) {\n        sameFile++;\n      }\n    }\n  }\n  if (ambiguities > 0) {\n    if (sameRank > 0 && sameFile > 0) {\n      /*\n       * if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      return algebraic(from);\n    } else if (sameFile > 0) {\n      /*\n       * if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1);\n    } else {\n      // else use the file symbol\n      return algebraic(from).charAt(0);\n    }\n  }\n  return '';\n}\nfunction addMove(moves, color, from, to, piece, captured = undefined, flags = BITS.NORMAL) {\n  const r = rank(to);\n  if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n    for (let i = 0; i < PROMOTIONS.length; i++) {\n      const promotion = PROMOTIONS[i];\n      moves.push({\n        color,\n        from,\n        to,\n        piece,\n        captured,\n        promotion,\n        flags: flags | BITS.PROMOTION\n      });\n    }\n  } else {\n    moves.push({\n      color,\n      from,\n      to,\n      piece,\n      captured,\n      flags\n    });\n  }\n}\nfunction inferPieceType(san) {\n  let pieceType = san.charAt(0);\n  if (pieceType >= 'a' && pieceType <= 'h') {\n    const matches = san.match(/[a-h]\\d.*[a-h]\\d/);\n    if (matches) {\n      return undefined;\n    }\n    return PAWN;\n  }\n  pieceType = pieceType.toLowerCase();\n  if (pieceType === 'o') {\n    return KING;\n  }\n  return pieceType;\n}\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move) {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n}\nexport class Chess {\n  _board = new Array(128);\n  _turn = WHITE;\n  _header = {};\n  _kings = {\n    w: EMPTY,\n    b: EMPTY\n  };\n  _epSquare = -1;\n  _halfMoves = 0;\n  _moveNumber = 0;\n  _history = [];\n  _comments = {};\n  _castling = {\n    w: 0,\n    b: 0\n  };\n  _hash = 0n;\n  // tracks number of times a position has been seen for repetition checking\n  _positionCount = new Map();\n  constructor(fen = DEFAULT_POSITION, {\n    skipValidation = false\n  } = {}) {\n    this.load(fen, {\n      skipValidation\n    });\n  }\n  clear({\n    preserveHeaders = false\n  } = {}) {\n    this._board = new Array(128);\n    this._kings = {\n      w: EMPTY,\n      b: EMPTY\n    };\n    this._turn = WHITE;\n    this._castling = {\n      w: 0,\n      b: 0\n    };\n    this._epSquare = EMPTY;\n    this._halfMoves = 0;\n    this._moveNumber = 1;\n    this._history = [];\n    this._comments = {};\n    this._header = preserveHeaders ? this._header : {\n      ...HEADER_TEMPLATE\n    };\n    this._hash = this._computeHash();\n    this._positionCount = new Map();\n    /*\n     * Delete the SetUp and FEN headers (if preserved), the board is empty and\n     * these headers don't make sense in this state. They'll get added later\n     * via .load() or .put()\n     */\n    this._header['SetUp'] = null;\n    this._header['FEN'] = null;\n  }\n  load(fen, {\n    skipValidation = false,\n    preserveHeaders = false\n  } = {}) {\n    let tokens = fen.split(/\\s+/);\n    // append commonly omitted fen tokens\n    if (tokens.length >= 2 && tokens.length < 6) {\n      const adjustments = ['-', '-', '0', '1'];\n      fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ');\n    }\n    tokens = fen.split(/\\s+/);\n    if (!skipValidation) {\n      const {\n        ok,\n        error\n      } = validateFen(fen);\n      if (!ok) {\n        throw new Error(error);\n      }\n    }\n    const position = tokens[0];\n    let square = 0;\n    this.clear({\n      preserveHeaders\n    });\n    for (let i = 0; i < position.length; i++) {\n      const piece = position.charAt(i);\n      if (piece === '/') {\n        square += 8;\n      } else if (isDigit(piece)) {\n        square += parseInt(piece, 10);\n      } else {\n        const color = piece < 'a' ? WHITE : BLACK;\n        this._put({\n          type: piece.toLowerCase(),\n          color\n        }, algebraic(square));\n        square++;\n      }\n    }\n    this._turn = tokens[1];\n    if (tokens[2].indexOf('K') > -1) {\n      this._castling.w |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      this._castling.w |= BITS.QSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      this._castling.b |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      this._castling.b |= BITS.QSIDE_CASTLE;\n    }\n    this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3]];\n    this._halfMoves = parseInt(tokens[4], 10);\n    this._moveNumber = parseInt(tokens[5], 10);\n    this._hash = this._computeHash();\n    this._updateSetup(fen);\n    this._incPositionCount();\n  }\n  fen({\n    forceEnpassantSquare = false\n  } = {}) {\n    let empty = 0;\n    let fen = '';\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i]) {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        const {\n          color,\n          type: piece\n        } = this._board[i];\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n      } else {\n        empty++;\n      }\n      if (i + 1 & 0x88) {\n        if (empty > 0) {\n          fen += empty;\n        }\n        if (i !== Ox88.h1) {\n          fen += '/';\n        }\n        empty = 0;\n        i += 8;\n      }\n    }\n    let castling = '';\n    if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n      castling += 'K';\n    }\n    if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n      castling += 'Q';\n    }\n    if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n      castling += 'k';\n    }\n    if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n      castling += 'q';\n    }\n    // do we have an empty castling flag?\n    castling = castling || '-';\n    let epSquare = '-';\n    /*\n     * only print the ep square if en passant is a valid move (pawn is present\n     * and ep capture is not pinned)\n     */\n    if (this._epSquare !== EMPTY) {\n      if (forceEnpassantSquare) {\n        epSquare = algebraic(this._epSquare);\n      } else {\n        const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n        const squares = [bigPawnSquare + 1, bigPawnSquare - 1];\n        for (const square of squares) {\n          // is the square off the board?\n          if (square & 0x88) {\n            continue;\n          }\n          const color = this._turn;\n          // is there a pawn that can capture the epSquare?\n          if (this._board[square]?.color === color && this._board[square]?.type === PAWN) {\n            // if the pawn makes an ep capture, does it leave its king in check?\n            this._makeMove({\n              color,\n              from: square,\n              to: this._epSquare,\n              piece: PAWN,\n              captured: PAWN,\n              flags: BITS.EP_CAPTURE\n            });\n            const isLegal = !this._isKingAttacked(color);\n            this._undoMove();\n            // if ep is legal, break and set the ep square in the FEN output\n            if (isLegal) {\n              epSquare = algebraic(this._epSquare);\n              break;\n            }\n          }\n        }\n      }\n    }\n    return [fen, this._turn, castling, epSquare, this._halfMoves, this._moveNumber].join(' ');\n  }\n  _pieceKey(i) {\n    if (!this._board[i]) {\n      return 0n;\n    }\n    const {\n      color,\n      type\n    } = this._board[i];\n    const colorIndex = {\n      w: 0,\n      b: 1\n    }[color];\n    const typeIndex = {\n      p: 0,\n      n: 1,\n      b: 2,\n      r: 3,\n      q: 4,\n      k: 5\n    }[type];\n    return PIECE_KEYS[colorIndex][typeIndex][i];\n  }\n  _epKey() {\n    return this._epSquare === EMPTY ? 0n : EP_KEYS[this._epSquare & 7];\n  }\n  _castlingKey() {\n    const index = this._castling.w >> 5 | this._castling.b >> 3;\n    return CASTLING_KEYS[index];\n  }\n  _computeHash() {\n    let hash = 0n;\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      if (this._board[i]) {\n        hash ^= this._pieceKey(i);\n      }\n    }\n    hash ^= this._epKey();\n    hash ^= this._castlingKey();\n    if (this._turn === 'b') {\n      hash ^= SIDE_KEY;\n    }\n    return hash;\n  }\n  /*\n   * Called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object. If the FEN\n   * is equal to the default position, the SetUp and FEN are deleted the setup\n   * is only updated if history.length is zero, ie moves haven't been made.\n   */\n  _updateSetup(fen) {\n    if (this._history.length > 0) return;\n    if (fen !== DEFAULT_POSITION) {\n      this._header['SetUp'] = '1';\n      this._header['FEN'] = fen;\n    } else {\n      this._header['SetUp'] = null;\n      this._header['FEN'] = null;\n    }\n  }\n  reset() {\n    this.load(DEFAULT_POSITION);\n  }\n  get(square) {\n    return this._board[Ox88[square]];\n  }\n  findPiece(piece) {\n    const squares = [];\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      // if empty square or wrong color\n      if (!this._board[i] || this._board[i]?.color !== piece.color) {\n        continue;\n      }\n      // check if square contains the requested piece\n      if (this._board[i].color === piece.color && this._board[i].type === piece.type) {\n        squares.push(algebraic(i));\n      }\n    }\n    return squares;\n  }\n  put({\n    type,\n    color\n  }, square) {\n    if (this._put({\n      type,\n      color\n    }, square)) {\n      this._updateCastlingRights();\n      this._updateEnPassantSquare();\n      this._updateSetup(this.fen());\n      return true;\n    }\n    return false;\n  }\n  _set(sq, piece) {\n    this._hash ^= this._pieceKey(sq);\n    this._board[sq] = piece;\n    this._hash ^= this._pieceKey(sq);\n  }\n  _put({\n    type,\n    color\n  }, square) {\n    // check for piece\n    if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n      return false;\n    }\n    // check for valid square\n    if (!(square in Ox88)) {\n      return false;\n    }\n    const sq = Ox88[square];\n    // don't let the user place more than one king\n    if (type == KING && !(this._kings[color] == EMPTY || this._kings[color] == sq)) {\n      return false;\n    }\n    const currentPieceOnSquare = this._board[sq];\n    // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`\n    if (currentPieceOnSquare && currentPieceOnSquare.type === KING) {\n      this._kings[currentPieceOnSquare.color] = EMPTY;\n    }\n    this._set(sq, {\n      type: type,\n      color: color\n    });\n    if (type === KING) {\n      this._kings[color] = sq;\n    }\n    return true;\n  }\n  _clear(sq) {\n    this._hash ^= this._pieceKey(sq);\n    delete this._board[sq];\n  }\n  remove(square) {\n    const piece = this.get(square);\n    this._clear(Ox88[square]);\n    if (piece && piece.type === KING) {\n      this._kings[piece.color] = EMPTY;\n    }\n    this._updateCastlingRights();\n    this._updateEnPassantSquare();\n    this._updateSetup(this.fen());\n    return piece;\n  }\n  _updateCastlingRights() {\n    this._hash ^= this._castlingKey();\n    const whiteKingInPlace = this._board[Ox88.e1]?.type === KING && this._board[Ox88.e1]?.color === WHITE;\n    const blackKingInPlace = this._board[Ox88.e8]?.type === KING && this._board[Ox88.e8]?.color === BLACK;\n    if (!whiteKingInPlace || this._board[Ox88.a1]?.type !== ROOK || this._board[Ox88.a1]?.color !== WHITE) {\n      this._castling.w &= ~BITS.QSIDE_CASTLE;\n    }\n    if (!whiteKingInPlace || this._board[Ox88.h1]?.type !== ROOK || this._board[Ox88.h1]?.color !== WHITE) {\n      this._castling.w &= ~BITS.KSIDE_CASTLE;\n    }\n    if (!blackKingInPlace || this._board[Ox88.a8]?.type !== ROOK || this._board[Ox88.a8]?.color !== BLACK) {\n      this._castling.b &= ~BITS.QSIDE_CASTLE;\n    }\n    if (!blackKingInPlace || this._board[Ox88.h8]?.type !== ROOK || this._board[Ox88.h8]?.color !== BLACK) {\n      this._castling.b &= ~BITS.KSIDE_CASTLE;\n    }\n    this._hash ^= this._castlingKey();\n  }\n  _updateEnPassantSquare() {\n    if (this._epSquare === EMPTY) {\n      return;\n    }\n    const startSquare = this._epSquare + (this._turn === WHITE ? -16 : 16);\n    const currentSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n    const attackers = [currentSquare + 1, currentSquare - 1];\n    if (this._board[startSquare] !== null || this._board[this._epSquare] !== null || this._board[currentSquare]?.color !== swapColor(this._turn) || this._board[currentSquare]?.type !== PAWN) {\n      this._hash ^= this._epKey();\n      this._epSquare = EMPTY;\n      return;\n    }\n    const canCapture = square => !(square & 0x88) && this._board[square]?.color === this._turn && this._board[square]?.type === PAWN;\n    if (!attackers.some(canCapture)) {\n      this._hash ^= this._epKey();\n      this._epSquare = EMPTY;\n    }\n  }\n  _attacked(color, square, verbose) {\n    const attackers = [];\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      // if empty square or wrong color\n      if (this._board[i] === undefined || this._board[i].color !== color) {\n        continue;\n      }\n      const piece = this._board[i];\n      const difference = i - square;\n      // skip - to/from square are the same\n      if (difference === 0) {\n        continue;\n      }\n      const index = difference + 119;\n      if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (difference > 0 && piece.color === WHITE || difference <= 0 && piece.color === BLACK) {\n            if (!verbose) {\n              return true;\n            } else {\n              attackers.push(algebraic(i));\n            }\n          }\n          continue;\n        }\n        // if the piece is a knight or a king\n        if (piece.type === 'n' || piece.type === 'k') {\n          if (!verbose) {\n            return true;\n          } else {\n            attackers.push(algebraic(i));\n            continue;\n          }\n        }\n        const offset = RAYS[index];\n        let j = i + offset;\n        let blocked = false;\n        while (j !== square) {\n          if (this._board[j] != null) {\n            blocked = true;\n            break;\n          }\n          j += offset;\n        }\n        if (!blocked) {\n          if (!verbose) {\n            return true;\n          } else {\n            attackers.push(algebraic(i));\n            continue;\n          }\n        }\n      }\n    }\n    if (verbose) {\n      return attackers;\n    } else {\n      return false;\n    }\n  }\n  attackers(square, attackedBy) {\n    if (!attackedBy) {\n      return this._attacked(this._turn, Ox88[square], true);\n    } else {\n      return this._attacked(attackedBy, Ox88[square], true);\n    }\n  }\n  _isKingAttacked(color) {\n    const square = this._kings[color];\n    return square === -1 ? false : this._attacked(swapColor(color), square);\n  }\n  hash() {\n    return this._hash.toString(16);\n  }\n  isAttacked(square, attackedBy) {\n    return this._attacked(attackedBy, Ox88[square]);\n  }\n  isCheck() {\n    return this._isKingAttacked(this._turn);\n  }\n  inCheck() {\n    return this.isCheck();\n  }\n  isCheckmate() {\n    return this.isCheck() && this._moves().length === 0;\n  }\n  isStalemate() {\n    return !this.isCheck() && this._moves().length === 0;\n  }\n  isInsufficientMaterial() {\n    /*\n     * k.b. vs k.b. (of opposite colors) with mate in 1:\n     * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n     *\n     * k.b. vs k.n. with mate in 1:\n     * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n     */\n    const pieces = {\n      b: 0,\n      n: 0,\n      r: 0,\n      q: 0,\n      k: 0,\n      p: 0\n    };\n    const bishops = [];\n    let numPieces = 0;\n    let squareColor = 0;\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      squareColor = (squareColor + 1) % 2;\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n      const piece = this._board[i];\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n        if (piece.type === BISHOP) {\n          bishops.push(squareColor);\n        }\n        numPieces++;\n      }\n    }\n    // k vs. k\n    if (numPieces === 2) {\n      return true;\n    } else if (\n    // k vs. kn .... or .... k vs. kb\n    numPieces === 3 && (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n      return true;\n    } else if (numPieces === pieces[BISHOP] + 2) {\n      // kb vs. kb where any number of bishops are all on the same color\n      let sum = 0;\n      const len = bishops.length;\n      for (let i = 0; i < len; i++) {\n        sum += bishops[i];\n      }\n      if (sum === 0 || sum === len) {\n        return true;\n      }\n    }\n    return false;\n  }\n  isThreefoldRepetition() {\n    return this._getPositionCount(this._hash) >= 3;\n  }\n  isDrawByFiftyMoves() {\n    return this._halfMoves >= 100; // 50 moves per side = 100 half moves\n  }\n  isDraw() {\n    return this.isDrawByFiftyMoves() || this.isStalemate() || this.isInsufficientMaterial() || this.isThreefoldRepetition();\n  }\n  isGameOver() {\n    return this.isCheckmate() || this.isDraw();\n  }\n  moves({\n    verbose = false,\n    square = undefined,\n    piece = undefined\n  } = {}) {\n    const moves = this._moves({\n      square,\n      piece\n    });\n    if (verbose) {\n      return moves.map(move => new Move(this, move));\n    } else {\n      return moves.map(move => this._moveToSan(move, moves));\n    }\n  }\n  _moves({\n    legal = true,\n    piece = undefined,\n    square = undefined\n  } = {}) {\n    const forSquare = square ? square.toLowerCase() : undefined;\n    const forPiece = piece?.toLowerCase();\n    const moves = [];\n    const us = this._turn;\n    const them = swapColor(us);\n    let firstSquare = Ox88.a8;\n    let lastSquare = Ox88.h1;\n    let singleSquare = false;\n    // are we generating moves for a single square?\n    if (forSquare) {\n      // illegal square, return empty moves\n      if (!(forSquare in Ox88)) {\n        return [];\n      } else {\n        firstSquare = lastSquare = Ox88[forSquare];\n        singleSquare = true;\n      }\n    }\n    for (let from = firstSquare; from <= lastSquare; from++) {\n      // did we run off the end of the board\n      if (from & 0x88) {\n        from += 7;\n        continue;\n      }\n      // empty square or opponent, skip\n      if (!this._board[from] || this._board[from].color === them) {\n        continue;\n      }\n      const {\n        type\n      } = this._board[from];\n      let to;\n      if (type === PAWN) {\n        if (forPiece && forPiece !== type) continue;\n        // single square, non-capturing\n        to = from + PAWN_OFFSETS[us][0];\n        if (!this._board[to]) {\n          addMove(moves, us, from, to, PAWN);\n          // double square\n          to = from + PAWN_OFFSETS[us][1];\n          if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n            addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN);\n          }\n        }\n        // pawn captures\n        for (let j = 2; j < 4; j++) {\n          to = from + PAWN_OFFSETS[us][j];\n          if (to & 0x88) continue;\n          if (this._board[to]?.color === them) {\n            addMove(moves, us, from, to, PAWN, this._board[to].type, BITS.CAPTURE);\n          } else if (to === this._epSquare) {\n            addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE);\n          }\n        }\n      } else {\n        if (forPiece && forPiece !== type) continue;\n        for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n          const offset = PIECE_OFFSETS[type][j];\n          to = from;\n          while (true) {\n            to += offset;\n            if (to & 0x88) break;\n            if (!this._board[to]) {\n              addMove(moves, us, from, to, type);\n            } else {\n              // own color, stop loop\n              if (this._board[to].color === us) break;\n              addMove(moves, us, from, to, type, this._board[to].type, BITS.CAPTURE);\n              break;\n            }\n            /* break, if knight or king */\n            if (type === KNIGHT || type === KING) break;\n          }\n        }\n      }\n    }\n    /*\n     * check for castling if we're:\n     *   a) generating all moves, or\n     *   b) doing single square move generation on the king's square\n     */\n    if (forPiece === undefined || forPiece === KING) {\n      if (!singleSquare || lastSquare === this._kings[us]) {\n        // king-side castling\n        if (this._castling[us] & BITS.KSIDE_CASTLE) {\n          const castlingFrom = this._kings[us];\n          const castlingTo = castlingFrom + 2;\n          if (!this._board[castlingFrom + 1] && !this._board[castlingTo] && !this._attacked(them, this._kings[us]) && !this._attacked(them, castlingFrom + 1) && !this._attacked(them, castlingTo)) {\n            addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.KSIDE_CASTLE);\n          }\n        }\n        // queen-side castling\n        if (this._castling[us] & BITS.QSIDE_CASTLE) {\n          const castlingFrom = this._kings[us];\n          const castlingTo = castlingFrom - 2;\n          if (!this._board[castlingFrom - 1] && !this._board[castlingFrom - 2] && !this._board[castlingFrom - 3] && !this._attacked(them, this._kings[us]) && !this._attacked(them, castlingFrom - 1) && !this._attacked(them, castlingTo)) {\n            addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.QSIDE_CASTLE);\n          }\n        }\n      }\n    }\n    /*\n     * return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal || this._kings[us] === -1) {\n      return moves;\n    }\n    // filter out illegal moves\n    const legalMoves = [];\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i]);\n      if (!this._isKingAttacked(us)) {\n        legalMoves.push(moves[i]);\n      }\n      this._undoMove();\n    }\n    return legalMoves;\n  }\n  move(move, {\n    strict = false\n  } = {}) {\n    /*\n     * The move function can be called with in the following parameters:\n     *\n     * .move('Nxb7')       <- argument is a case-sensitive SAN string\n     *\n     * .move({ from: 'h7', <- argument is a move object\n     *         to :'h8',\n     *         promotion: 'q' })\n     *\n     *\n     * An optional strict argument may be supplied to tell chess.js to\n     * strictly follow the SAN specification.\n     */\n    let moveObj = null;\n    if (typeof move === 'string') {\n      moveObj = this._moveFromSan(move, strict);\n    } else if (typeof move === 'object') {\n      const moves = this._moves();\n      // convert the pretty move object to an ugly move object\n      for (let i = 0, len = moves.length; i < len; i++) {\n        if (move.from === algebraic(moves[i].from) && move.to === algebraic(moves[i].to) && (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)) {\n          moveObj = moves[i];\n          break;\n        }\n      }\n    }\n    // failed to find move\n    if (!moveObj) {\n      if (typeof move === 'string') {\n        throw new Error(`Invalid move: ${move}`);\n      } else {\n        throw new Error(`Invalid move: ${JSON.stringify(move)}`);\n      }\n    }\n    /*\n     * need to make a copy of move because we can't generate SAN after the move\n     * is made\n     */\n    const prettyMove = new Move(this, moveObj);\n    this._makeMove(moveObj);\n    this._incPositionCount();\n    return prettyMove;\n  }\n  _push(move) {\n    this._history.push({\n      move,\n      kings: {\n        b: this._kings.b,\n        w: this._kings.w\n      },\n      turn: this._turn,\n      castling: {\n        b: this._castling.b,\n        w: this._castling.w\n      },\n      epSquare: this._epSquare,\n      halfMoves: this._halfMoves,\n      moveNumber: this._moveNumber\n    });\n  }\n  _movePiece(from, to) {\n    this._hash ^= this._pieceKey(from);\n    this._board[to] = this._board[from];\n    delete this._board[from];\n    this._hash ^= this._pieceKey(to);\n  }\n  _makeMove(move) {\n    const us = this._turn;\n    const them = swapColor(us);\n    this._push(move);\n    this._hash ^= this._epKey();\n    this._hash ^= this._castlingKey();\n    if (move.captured) {\n      this._hash ^= this._pieceKey(move.to);\n    }\n    this._movePiece(move.from, move.to);\n    // if ep capture, remove the captured pawn\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (this._turn === BLACK) {\n        this._clear(move.to - 16);\n      } else {\n        this._clear(move.to + 16);\n      }\n    }\n    // if pawn promotion, replace with new piece\n    if (move.promotion) {\n      this._clear(move.to);\n      this._set(move.to, {\n        type: move.promotion,\n        color: us\n      });\n    }\n    // if we moved the king\n    if (this._board[move.to].type === KING) {\n      this._kings[us] = move.to;\n      // if we castled, move the rook next to the king\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        const castlingTo = move.to - 1;\n        const castlingFrom = move.to + 1;\n        this._movePiece(castlingFrom, castlingTo);\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        const castlingTo = move.to + 1;\n        const castlingFrom = move.to - 2;\n        this._movePiece(castlingFrom, castlingTo);\n      }\n      // turn off castling\n      this._castling[us] = 0;\n    }\n    // turn off castling if we move a rook\n    if (this._castling[us]) {\n      for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (move.from === ROOKS[us][i].square && this._castling[us] & ROOKS[us][i].flag) {\n          this._castling[us] ^= ROOKS[us][i].flag;\n          break;\n        }\n      }\n    }\n    // turn off castling if we capture a rook\n    if (this._castling[them]) {\n      for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (move.to === ROOKS[them][i].square && this._castling[them] & ROOKS[them][i].flag) {\n          this._castling[them] ^= ROOKS[them][i].flag;\n          break;\n        }\n      }\n    }\n    this._hash ^= this._castlingKey();\n    // if big pawn move, update the en passant square\n    if (move.flags & BITS.BIG_PAWN) {\n      let epSquare;\n      if (us === BLACK) {\n        epSquare = move.to - 16;\n      } else {\n        epSquare = move.to + 16;\n      }\n      if (!(move.to - 1 & 0x88) && this._board[move.to - 1]?.type === PAWN && this._board[move.to - 1]?.color === them || !(move.to + 1 & 0x88) && this._board[move.to + 1]?.type === PAWN && this._board[move.to + 1]?.color === them) {\n        this._epSquare = epSquare;\n        this._hash ^= this._epKey();\n      } else {\n        this._epSquare = EMPTY;\n      }\n    } else {\n      this._epSquare = EMPTY;\n    }\n    // reset the 50 move counter if a pawn is moved or a piece is captured\n    if (move.piece === PAWN) {\n      this._halfMoves = 0;\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      this._halfMoves = 0;\n    } else {\n      this._halfMoves++;\n    }\n    if (us === BLACK) {\n      this._moveNumber++;\n    }\n    this._turn = them;\n    this._hash ^= SIDE_KEY;\n  }\n  undo() {\n    const hash = this._hash;\n    const move = this._undoMove();\n    if (move) {\n      const prettyMove = new Move(this, move);\n      this._decPositionCount(hash);\n      return prettyMove;\n    }\n    return null;\n  }\n  _undoMove() {\n    const old = this._history.pop();\n    if (old === undefined) {\n      return null;\n    }\n    this._hash ^= this._epKey();\n    this._hash ^= this._castlingKey();\n    const move = old.move;\n    this._kings = old.kings;\n    this._turn = old.turn;\n    this._castling = old.castling;\n    this._epSquare = old.epSquare;\n    this._halfMoves = old.halfMoves;\n    this._moveNumber = old.moveNumber;\n    this._hash ^= this._epKey();\n    this._hash ^= this._castlingKey();\n    this._hash ^= SIDE_KEY;\n    const us = this._turn;\n    const them = swapColor(us);\n    this._movePiece(move.to, move.from);\n    // to undo any promotions\n    if (move.piece) {\n      this._clear(move.from);\n      this._set(move.from, {\n        type: move.piece,\n        color: us\n      });\n    }\n    if (move.captured) {\n      if (move.flags & BITS.EP_CAPTURE) {\n        // en passant capture\n        let index;\n        if (us === BLACK) {\n          index = move.to - 16;\n        } else {\n          index = move.to + 16;\n        }\n        this._set(index, {\n          type: PAWN,\n          color: them\n        });\n      } else {\n        // regular capture\n        this._set(move.to, {\n          type: move.captured,\n          color: them\n        });\n      }\n    }\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      let castlingTo, castlingFrom;\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castlingTo = move.to + 1;\n        castlingFrom = move.to - 1;\n      } else {\n        castlingTo = move.to - 2;\n        castlingFrom = move.to + 1;\n      }\n      this._movePiece(castlingFrom, castlingTo);\n    }\n    return move;\n  }\n  pgn({\n    newline = '\\n',\n    maxWidth = 0\n  } = {}) {\n    /*\n     * using the specification from http://www.chessclub.com/help/PGN-spec\n     * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n     */\n    const result = [];\n    let headerExists = false;\n    /* add the PGN header information */\n    for (const i in this._header) {\n      /*\n       * TODO: order of enumerated properties in header object is not\n       * guaranteed, see ECMA-262 spec (section 12.6.4)\n       *\n       * By using HEADER_TEMPLATE, the order of tags should be preserved; we\n       * do have to check for null placeholders, though, and omit them\n       */\n      const headerTag = this._header[i];\n      if (headerTag) result.push(`[${i} \"${this._header[i]}\"]` + newline);\n      headerExists = true;\n    }\n    if (headerExists && this._history.length) {\n      result.push(newline);\n    }\n    const appendComment = moveString => {\n      const comment = this._comments[this.fen()];\n      if (typeof comment !== 'undefined') {\n        const delimiter = moveString.length > 0 ? ' ' : '';\n        moveString = `${moveString}${delimiter}{${comment}}`;\n      }\n      return moveString;\n    };\n    // pop all of history onto reversed_history\n    const reversedHistory = [];\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove());\n    }\n    const moves = [];\n    let moveString = '';\n    // special case of a commented starting position with no moves\n    if (reversedHistory.length === 0) {\n      moves.push(appendComment(''));\n    }\n    // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n    while (reversedHistory.length > 0) {\n      moveString = appendComment(moveString);\n      const move = reversedHistory.pop();\n      // make TypeScript stop complaining about move being undefined\n      if (!move) {\n        break;\n      }\n      // if the position started with black to move, start PGN with #. ...\n      if (!this._history.length && move.color === 'b') {\n        const prefix = `${this._moveNumber}. ...`;\n        // is there a comment preceding the first move?\n        moveString = moveString ? `${moveString} ${prefix}` : prefix;\n      } else if (move.color === 'w') {\n        // store the previous generated move_string if we have one\n        if (moveString.length) {\n          moves.push(moveString);\n        }\n        moveString = this._moveNumber + '.';\n      }\n      moveString = moveString + ' ' + this._moveToSan(move, this._moves({\n        legal: true\n      }));\n      this._makeMove(move);\n    }\n    // are there any other leftover moves?\n    if (moveString.length) {\n      moves.push(appendComment(moveString));\n    }\n    // is there a result? (there ALWAYS has to be a result according to spec; see Seven Tag Roster)\n    moves.push(this._header.Result || '*');\n    /*\n     * history should be back to what it was before we started generating PGN,\n     * so join together moves\n     */\n    if (maxWidth === 0) {\n      return result.join('') + moves.join(' ');\n    }\n    // TODO (jah): huh?\n    const strip = function () {\n      if (result.length > 0 && result[result.length - 1] === ' ') {\n        result.pop();\n        return true;\n      }\n      return false;\n    };\n    // NB: this does not preserve comment whitespace.\n    const wrapComment = function (width, move) {\n      for (const token of move.split(' ')) {\n        if (!token) {\n          continue;\n        }\n        if (width + token.length > maxWidth) {\n          while (strip()) {\n            width--;\n          }\n          result.push(newline);\n          width = 0;\n        }\n        result.push(token);\n        width += token.length;\n        result.push(' ');\n        width++;\n      }\n      if (strip()) {\n        width--;\n      }\n      return width;\n    };\n    // wrap the PGN output at max_width\n    let currentWidth = 0;\n    for (let i = 0; i < moves.length; i++) {\n      if (currentWidth + moves[i].length > maxWidth) {\n        if (moves[i].includes('{')) {\n          currentWidth = wrapComment(currentWidth, moves[i]);\n          continue;\n        }\n      }\n      // if the current move will push past max_width\n      if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n        // don't end the line with whitespace\n        if (result[result.length - 1] === ' ') {\n          result.pop();\n        }\n        result.push(newline);\n        currentWidth = 0;\n      } else if (i !== 0) {\n        result.push(' ');\n        currentWidth++;\n      }\n      result.push(moves[i]);\n      currentWidth += moves[i].length;\n    }\n    return result.join('');\n  }\n  /**\n   * @deprecated Use `setHeader` and `getHeaders` instead. This method will return null header tags (which is not what you want)\n   */\n  header(...args) {\n    for (let i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        this._header[args[i]] = args[i + 1];\n      }\n    }\n    return this._header;\n  }\n  // TODO: value validation per spec\n  setHeader(key, value) {\n    this._header[key] = value ?? SEVEN_TAG_ROSTER[key] ?? null;\n    return this.getHeaders();\n  }\n  removeHeader(key) {\n    if (key in this._header) {\n      this._header[key] = SEVEN_TAG_ROSTER[key] || null;\n      return true;\n    }\n    return false;\n  }\n  // return only non-null headers (omit placemarker nulls)\n  getHeaders() {\n    const nonNullHeaders = {};\n    for (const [key, value] of Object.entries(this._header)) {\n      if (value !== null) {\n        nonNullHeaders[key] = value;\n      }\n    }\n    return nonNullHeaders;\n  }\n  loadPgn(pgn, {\n    strict = false,\n    newlineChar = '\\r?\\n'\n  } = {}) {\n    // If newlineChar is not the default, replace all instances with \\n\n    if (newlineChar !== '\\r?\\n') {\n      pgn = pgn.replace(new RegExp(newlineChar, 'g'), '\\n');\n    }\n    const parsedPgn = parse(pgn);\n    // Put the board in the starting position\n    this.reset();\n    // parse PGN header\n    const headers = parsedPgn.headers;\n    let fen = '';\n    for (const key in headers) {\n      // check to see user is including fen (possibly with wrong tag case)\n      if (key.toLowerCase() === 'fen') {\n        fen = headers[key];\n      }\n      this.header(key, headers[key]);\n    }\n    /*\n     * the permissive parser should attempt to load a fen tag, even if it's the\n     * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n     */\n    if (!strict) {\n      if (fen) {\n        this.load(fen, {\n          preserveHeaders: true\n        });\n      }\n    } else {\n      /*\n       * strict parser - load the starting position indicated by [Setup '1']\n       * and [FEN position]\n       */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers)) {\n          throw new Error('Invalid PGN: FEN tag must be supplied with SetUp tag');\n        }\n        // don't clear the headers when loading\n        this.load(headers['FEN'], {\n          preserveHeaders: true\n        });\n      }\n    }\n    let node = parsedPgn.root;\n    while (node) {\n      if (node.move) {\n        const move = this._moveFromSan(node.move, strict);\n        if (move == null) {\n          throw new Error(`Invalid move in PGN: ${node.move}`);\n        } else {\n          this._makeMove(move);\n          this._incPositionCount();\n        }\n      }\n      if (node.comment !== undefined) {\n        this._comments[this.fen()] = node.comment;\n      }\n      node = node.variations[0];\n    }\n    /*\n     * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n     * the termination marker. Only do this when headers are present, but the\n     * result tag is missing\n     */\n    const result = parsedPgn.result;\n    if (result && Object.keys(this._header).length && this._header['Result'] !== result) {\n      this.setHeader('Result', result);\n    }\n  }\n  /*\n   * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} strict Use the strict SAN parser. It will throw errors\n   * on overly disambiguated moves (see below):\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  _moveToSan(move, moves) {\n    let output = '';\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O';\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O';\n    } else {\n      if (move.piece !== PAWN) {\n        const disambiguator = getDisambiguator(move, moves);\n        output += move.piece.toUpperCase() + disambiguator;\n      }\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0];\n        }\n        output += 'x';\n      }\n      output += algebraic(move.to);\n      if (move.promotion) {\n        output += '=' + move.promotion.toUpperCase();\n      }\n    }\n    this._makeMove(move);\n    if (this.isCheck()) {\n      if (this.isCheckmate()) {\n        output += '#';\n      } else {\n        output += '+';\n      }\n    }\n    this._undoMove();\n    return output;\n  }\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  _moveFromSan(move, strict = false) {\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    let cleanMove = strippedSan(move);\n    if (!strict) {\n      if (cleanMove === '0-0') {\n        cleanMove = 'O-O';\n      } else if (cleanMove === '0-0-0') {\n        cleanMove = 'O-O-O';\n      }\n    }\n    let pieceType = inferPieceType(cleanMove);\n    let moves = this._moves({\n      legal: true,\n      piece: pieceType\n    });\n    // strict parser\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n        return moves[i];\n      }\n    }\n    // the strict parser failed\n    if (strict) {\n      return null;\n    }\n    let piece = undefined;\n    let matches = undefined;\n    let from = undefined;\n    let to = undefined;\n    let promotion = undefined;\n    /*\n     * The default permissive (non-strict) parser allows the user to parse\n     * non-standard chess notations. This parser is only run after the strict\n     * Standard Algebraic Notation (SAN) parser has failed.\n     *\n     * When running the permissive parser, we'll run a regex to grab the piece, the\n     * to/from square, and an optional promotion piece. This regex will\n     * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n     * f7f8q, b1c3\n     *\n     * NOTE: Some positions and moves may be ambiguous when using the permissive\n     * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n     * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n     * move). In these cases, the permissive parser will default to the most\n     * basic interpretation (which is b1c3 parsing to Nc3).\n     */\n    let overlyDisambiguated = false;\n    matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n    if (matches) {\n      piece = matches[1];\n      from = matches[2];\n      to = matches[3];\n      promotion = matches[4];\n      if (from.length == 1) {\n        overlyDisambiguated = true;\n      }\n    } else {\n      /*\n       * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n       * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n       * there is one legal knight move to e7). In this case, the value of\n       * 'from' variable will be a rank or file, not a square.\n       */\n      matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);\n      if (matches) {\n        piece = matches[1];\n        from = matches[2];\n        to = matches[3];\n        promotion = matches[4];\n        if (from.length == 1) {\n          overlyDisambiguated = true;\n        }\n      }\n    }\n    pieceType = inferPieceType(cleanMove);\n    moves = this._moves({\n      legal: true,\n      piece: piece ? piece : pieceType\n    });\n    if (!to) {\n      return null;\n    }\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (!from) {\n        // if there is no from square, it could be just 'x' missing from a capture\n        if (cleanMove === strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')) {\n          return moves[i];\n        }\n        // hand-compare move properties with the results from our permissive regex\n      } else if ((!piece || piece.toLowerCase() == moves[i].piece) && Ox88[from] == moves[i].from && Ox88[to] == moves[i].to && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n        return moves[i];\n      } else if (overlyDisambiguated) {\n        /*\n         * SPECIAL CASE: we parsed a move string that may have an unneeded\n         * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n         */\n        const square = algebraic(moves[i].from);\n        if ((!piece || piece.toLowerCase() == moves[i].piece) && Ox88[to] == moves[i].to && (from == square[0] || from == square[1]) && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n          return moves[i];\n        }\n      }\n    }\n    return null;\n  }\n  ascii() {\n    let s = '   +------------------------+\\n';\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // display the rank\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |';\n      }\n      if (this._board[i]) {\n        const piece = this._board[i].type;\n        const color = this._board[i].color;\n        const symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n        s += ' ' + symbol + ' ';\n      } else {\n        s += ' . ';\n      }\n      if (i + 1 & 0x88) {\n        s += '|\\n';\n        i += 8;\n      }\n    }\n    s += '   +------------------------+\\n';\n    s += '     a  b  c  d  e  f  g  h';\n    return s;\n  }\n  perft(depth) {\n    const moves = this._moves({\n      legal: false\n    });\n    let nodes = 0;\n    const color = this._turn;\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i]);\n      if (!this._isKingAttacked(color)) {\n        if (depth - 1 > 0) {\n          nodes += this.perft(depth - 1);\n        } else {\n          nodes++;\n        }\n      }\n      this._undoMove();\n    }\n    return nodes;\n  }\n  turn() {\n    return this._turn;\n  }\n  board() {\n    const output = [];\n    let row = [];\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i] == null) {\n        row.push(null);\n      } else {\n        row.push({\n          square: algebraic(i),\n          type: this._board[i].type,\n          color: this._board[i].color\n        });\n      }\n      if (i + 1 & 0x88) {\n        output.push(row);\n        row = [];\n        i += 8;\n      }\n    }\n    return output;\n  }\n  squareColor(square) {\n    if (square in Ox88) {\n      const sq = Ox88[square];\n      return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark';\n    }\n    return null;\n  }\n  history({\n    verbose = false\n  } = {}) {\n    const reversedHistory = [];\n    const moveHistory = [];\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove());\n    }\n    while (true) {\n      const move = reversedHistory.pop();\n      if (!move) {\n        break;\n      }\n      if (verbose) {\n        moveHistory.push(new Move(this, move));\n      } else {\n        moveHistory.push(this._moveToSan(move, this._moves()));\n      }\n      this._makeMove(move);\n    }\n    return moveHistory;\n  }\n  /*\n   * Keeps track of position occurrence counts for the purpose of repetition\n   * checking. Old positions are removed from the map if their counts are reduced to 0.\n   */\n  _getPositionCount(hash) {\n    return this._positionCount.get(hash) ?? 0;\n  }\n  _incPositionCount() {\n    this._positionCount.set(this._hash, (this._positionCount.get(this._hash) ?? 0) + 1);\n  }\n  _decPositionCount(hash) {\n    const currentCount = this._positionCount.get(hash) ?? 0;\n    if (currentCount === 1) {\n      this._positionCount.delete(hash);\n    } else {\n      this._positionCount.set(hash, currentCount - 1);\n    }\n  }\n  _pruneComments() {\n    const reversedHistory = [];\n    const currentComments = {};\n    const copyComment = fen => {\n      if (fen in this._comments) {\n        currentComments[fen] = this._comments[fen];\n      }\n    };\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove());\n    }\n    copyComment(this.fen());\n    while (true) {\n      const move = reversedHistory.pop();\n      if (!move) {\n        break;\n      }\n      this._makeMove(move);\n      copyComment(this.fen());\n    }\n    this._comments = currentComments;\n  }\n  getComment() {\n    return this._comments[this.fen()];\n  }\n  setComment(comment) {\n    this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']');\n  }\n  /**\n   * @deprecated Renamed to `removeComment` for consistency\n   */\n  deleteComment() {\n    return this.removeComment();\n  }\n  removeComment() {\n    const comment = this._comments[this.fen()];\n    delete this._comments[this.fen()];\n    return comment;\n  }\n  getComments() {\n    this._pruneComments();\n    return Object.keys(this._comments).map(fen => {\n      return {\n        fen: fen,\n        comment: this._comments[fen]\n      };\n    });\n  }\n  /**\n   * @deprecated Renamed to `removeComments` for consistency\n   */\n  deleteComments() {\n    return this.removeComments();\n  }\n  removeComments() {\n    this._pruneComments();\n    return Object.keys(this._comments).map(fen => {\n      const comment = this._comments[fen];\n      delete this._comments[fen];\n      return {\n        fen: fen,\n        comment: comment\n      };\n    });\n  }\n  setCastlingRights(color, rights) {\n    for (const side of [KING, QUEEN]) {\n      if (rights[side] !== undefined) {\n        if (rights[side]) {\n          this._castling[color] |= SIDES[side];\n        } else {\n          this._castling[color] &= ~SIDES[side];\n        }\n      }\n    }\n    this._updateCastlingRights();\n    const result = this.getCastlingRights(color);\n    return (rights[KING] === undefined || rights[KING] === result[KING]) && (rights[QUEEN] === undefined || rights[QUEEN] === result[QUEEN]);\n  }\n  getCastlingRights(color) {\n    return {\n      [KING]: (this._castling[color] & SIDES[KING]) !== 0,\n      [QUEEN]: (this._castling[color] & SIDES[QUEEN]) !== 0\n    };\n  }\n  moveNumber() {\n    return this._moveNumber;\n  }\n}","map":{"version":3,"names":["parse","MASK64","rotl","x","k","wrappingMul","y","xoroshiro128","state","s0","BigInt","s1","result","rand","PIECE_KEYS","Array","from","length","EP_KEYS","CASTLING_KEYS","SIDE_KEY","WHITE","BLACK","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","DEFAULT_POSITION","Move","color","to","piece","captured","promotion","flags","san","lan","before","after","constructor","chess","internal","fromAlgebraic","algebraic","toAlgebraic","legal","fen","flag","BITS","FLAGS","isCapture","indexOf","isPromotion","isEnPassant","isKingsideCastle","isQueensideCastle","isBigPawn","EMPTY","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","SQUARES","SEVEN_TAG_ROSTER","Event","Site","Date","Round","White","Black","Result","SUPLEMENTAL_TAGS","WhiteTitle","BlackTitle","WhiteElo","BlackElo","WhiteUSCF","BlackUSCF","WhiteNA","BlackNA","WhiteType","BlackType","EventDate","EventSponsor","Section","Stage","Board","Opening","Variation","SubVariation","ECO","NIC","Time","UTCTime","UTCDate","TimeControl","SetUp","FEN","Termination","Annotator","Mode","PlyCount","HEADER_TEMPLATE","Ox88","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","ATTACKS","RAYS","PIECE_MASKS","p","SYMBOLS","PROMOTIONS","RANK_1","RANK_2","RANK_7","RANK_8","SIDES","ROOKS","square","SECOND_RANK","rank","file","isDigit","c","f","substring","swapColor","validateFen","tokens","split","ok","error","moveNumber","parseInt","isNaN","halfMoves","test","rows","i","sumFields","previousWasNumber","kings","regex","match","some","char","toUpperCase","getDisambiguator","move","moves","ambiguities","sameRank","sameFile","len","ambigFrom","ambigTo","ambigPiece","charAt","addMove","undefined","push","inferPieceType","pieceType","matches","toLowerCase","strippedSan","replace","Chess","_board","_turn","_header","_kings","_epSquare","_halfMoves","_moveNumber","_history","_comments","_castling","_hash","_positionCount","Map","skipValidation","load","clear","preserveHeaders","_computeHash","adjustments","concat","slice","join","Error","position","_put","type","_updateSetup","_incPositionCount","forceEnpassantSquare","empty","castling","epSquare","bigPawnSquare","squares","_makeMove","isLegal","_isKingAttacked","_undoMove","_pieceKey","colorIndex","typeIndex","_epKey","_castlingKey","index","hash","reset","get","findPiece","put","_updateCastlingRights","_updateEnPassantSquare","_set","sq","currentPieceOnSquare","_clear","remove","whiteKingInPlace","blackKingInPlace","startSquare","currentSquare","attackers","canCapture","_attacked","verbose","difference","offset","j","blocked","attackedBy","toString","isAttacked","isCheck","inCheck","isCheckmate","_moves","isStalemate","isInsufficientMaterial","pieces","bishops","numPieces","squareColor","sum","isThreefoldRepetition","_getPositionCount","isDrawByFiftyMoves","isDraw","isGameOver","map","_moveToSan","forSquare","forPiece","us","them","firstSquare","lastSquare","singleSquare","castlingFrom","castlingTo","legalMoves","strict","moveObj","_moveFromSan","JSON","stringify","prettyMove","_push","turn","_movePiece","undo","_decPositionCount","old","pop","pgn","newline","maxWidth","headerExists","headerTag","appendComment","moveString","comment","delimiter","reversedHistory","prefix","strip","wrapComment","width","token","currentWidth","includes","header","args","setHeader","key","value","getHeaders","removeHeader","nonNullHeaders","Object","entries","loadPgn","newlineChar","RegExp","parsedPgn","headers","node","root","variations","keys","output","disambiguator","cleanMove","overlyDisambiguated","ascii","s","symbol","perft","depth","nodes","board","row","history","moveHistory","set","currentCount","delete","_pruneComments","currentComments","copyComment","getComment","setComment","deleteComment","removeComment","getComments","deleteComments","removeComments","setCastlingRights","rights","side","getCastlingRights"],"sources":["C:\\Users\\tobia\\OneDrive\\Escritorio\\ajedrez-ia\\frontend\\node_modules\\chess.js\\src\\chess.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2025, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { parse } from './pgn'\n\nconst MASK64 = 0xffffffffffffffffn\n\nfunction rotl(x: bigint, k: bigint): bigint {\n  return ((x << k) | (x >> (64n - k))) & 0xffffffffffffffffn\n}\n\nfunction wrappingMul(x: bigint, y: bigint) {\n  return (x * y) & MASK64\n}\n\n// xoroshiro128**\nexport function xoroshiro128(state: bigint) {\n  return function () {\n    let s0 = BigInt(state & MASK64)\n    let s1 = BigInt((state >> 64n) & MASK64)\n\n    const result = wrappingMul(rotl(wrappingMul(s0, 5n), 7n), 9n)\n\n    s1 ^= s0\n    s0 = (rotl(s0, 24n) ^ s1 ^ (s1 << 16n)) & MASK64\n    s1 = rotl(s1, 37n)\n\n    state = (s1 << 64n) | s0\n\n    return result\n  }\n}\n\nconst rand = xoroshiro128(0xa187eb39cdcaed8f31c4b365b102e01en)\n\nconst PIECE_KEYS = Array.from({ length: 2 }, () =>\n  Array.from({ length: 6 }, () => Array.from({ length: 128 }, () => rand())),\n)\n\nconst EP_KEYS = Array.from({ length: 8 }, () => rand())\n\nconst CASTLING_KEYS = Array.from({ length: 16 }, () => rand())\n\nconst SIDE_KEY = rand()\n\nexport const WHITE = 'w'\nexport const BLACK = 'b'\n\nexport const PAWN = 'p'\nexport const KNIGHT = 'n'\nexport const BISHOP = 'b'\nexport const ROOK = 'r'\nexport const QUEEN = 'q'\nexport const KING = 'k'\n\nexport type Color = 'w' | 'b'\nexport type PieceSymbol = 'p' | 'n' | 'b' | 'r' | 'q' | 'k'\n\n// prettier-ignore\nexport type Square =\n    'a8' | 'b8' | 'c8' | 'd8' | 'e8' | 'f8' | 'g8' | 'h8' |\n    'a7' | 'b7' | 'c7' | 'd7' | 'e7' | 'f7' | 'g7' | 'h7' |\n    'a6' | 'b6' | 'c6' | 'd6' | 'e6' | 'f6' | 'g6' | 'h6' |\n    'a5' | 'b5' | 'c5' | 'd5' | 'e5' | 'f5' | 'g5' | 'h5' |\n    'a4' | 'b4' | 'c4' | 'd4' | 'e4' | 'f4' | 'g4' | 'h4' |\n    'a3' | 'b3' | 'c3' | 'd3' | 'e3' | 'f3' | 'g3' | 'h3' |\n    'a2' | 'b2' | 'c2' | 'd2' | 'e2' | 'f2' | 'g2' | 'h2' |\n    'a1' | 'b1' | 'c1' | 'd1' | 'e1' | 'f1' | 'g1' | 'h1'\n\nexport const DEFAULT_POSITION =\n  'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\nexport type Piece = {\n  color: Color\n  type: PieceSymbol\n}\n\ntype InternalMove = {\n  color: Color\n  from: number\n  to: number\n  piece: PieceSymbol\n  captured?: PieceSymbol\n  promotion?: PieceSymbol\n  flags: number\n}\n\ninterface History {\n  move: InternalMove\n  kings: Record<Color, number>\n  turn: Color\n  castling: Record<Color, number>\n  epSquare: number\n  halfMoves: number\n  moveNumber: number\n}\n\nexport class Move {\n  color: Color\n  from: Square\n  to: Square\n  piece: PieceSymbol\n  captured?: PieceSymbol\n  promotion?: PieceSymbol\n\n  /**\n   * @deprecated This field is deprecated and will be removed in version 2.0.0.\n   * Please use move descriptor functions instead: `isCapture`, `isPromotion`,\n   * `isEnPassant`, `isKingsideCastle`, `isQueensideCastle`, `isCastle`, and\n   * `isBigPawn`\n   */\n  flags: string\n\n  san: string\n  lan: string\n  before: string\n  after: string\n\n  constructor(chess: Chess, internal: InternalMove) {\n    const { color, piece, from, to, flags, captured, promotion } = internal\n\n    const fromAlgebraic = algebraic(from)\n    const toAlgebraic = algebraic(to)\n\n    this.color = color\n    this.piece = piece\n    this.from = fromAlgebraic\n    this.to = toAlgebraic\n\n    /*\n     * HACK: The chess['_method']() calls below invoke private methods in the\n     * Chess class to generate SAN and FEN. It's a bit of a hack, but makes the\n     * code cleaner elsewhere.\n     */\n\n    this.san = chess['_moveToSan'](internal, chess['_moves']({ legal: true }))\n    this.lan = fromAlgebraic + toAlgebraic\n    this.before = chess.fen()\n\n    // Generate the FEN for the 'after' key\n    chess['_makeMove'](internal)\n    this.after = chess.fen()\n    chess['_undoMove']()\n\n    // Build the text representation of the move flags\n    this.flags = ''\n    for (const flag in BITS) {\n      if (BITS[flag] & flags) {\n        this.flags += FLAGS[flag]\n      }\n    }\n\n    if (captured) {\n      this.captured = captured\n    }\n\n    if (promotion) {\n      this.promotion = promotion\n      this.lan += promotion\n    }\n  }\n\n  isCapture() {\n    return this.flags.indexOf(FLAGS['CAPTURE']) > -1\n  }\n\n  isPromotion() {\n    return this.flags.indexOf(FLAGS['PROMOTION']) > -1\n  }\n\n  isEnPassant() {\n    return this.flags.indexOf(FLAGS['EP_CAPTURE']) > -1\n  }\n\n  isKingsideCastle() {\n    return this.flags.indexOf(FLAGS['KSIDE_CASTLE']) > -1\n  }\n\n  isQueensideCastle() {\n    return this.flags.indexOf(FLAGS['QSIDE_CASTLE']) > -1\n  }\n\n  isBigPawn() {\n    return this.flags.indexOf(FLAGS['BIG_PAWN']) > -1\n  }\n}\n\nconst EMPTY = -1\n\nconst FLAGS: Record<string, string> = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q',\n}\n\n// prettier-ignore\nexport const SQUARES: Square[] = [\n  'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',\n  'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',\n  'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',\n  'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\n  'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4',\n  'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',\n  'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',\n  'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'\n]\n\nconst BITS: Record<string, number> = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64,\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n// these are required, according to spec\nexport const SEVEN_TAG_ROSTER: Record<string, string> = {\n  Event: '?',\n  Site: '?',\n  Date: '????.??.??',\n  Round: '?',\n  White: '?',\n  Black: '?',\n  Result: '*',\n}\n\n/**\n * These nulls are placeholders to fix the order of tags (as they appear in PGN spec); null values will be\n * eliminated in getHeaders()\n */\nconst SUPLEMENTAL_TAGS: Record<string, string | null> = {\n  WhiteTitle: null,\n  BlackTitle: null,\n  WhiteElo: null,\n  BlackElo: null,\n  WhiteUSCF: null,\n  BlackUSCF: null,\n  WhiteNA: null,\n  BlackNA: null,\n  WhiteType: null,\n  BlackType: null,\n  EventDate: null,\n  EventSponsor: null,\n  Section: null,\n  Stage: null,\n  Board: null,\n  Opening: null,\n  Variation: null,\n  SubVariation: null,\n  ECO: null,\n  NIC: null,\n  Time: null,\n  UTCTime: null,\n  UTCDate: null,\n  TimeControl: null,\n  SetUp: null,\n  FEN: null,\n  Termination: null,\n  Annotator: null,\n  Mode: null,\n  PlyCount: null,\n}\n\nconst HEADER_TEMPLATE = {\n  ...SEVEN_TAG_ROSTER,\n  ...SUPLEMENTAL_TAGS,\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88: Record<Square, number> = {\n  a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n  a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n  a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n  a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n  a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n  a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n  a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n  a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n}\n\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15],\n}\n\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1],\n}\n\n// prettier-ignore\nconst ATTACKS = [\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n  24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n];\n\n// prettier-ignore\nconst RAYS = [\n   17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n    0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n    0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n    0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n    0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n    1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n    0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n    0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n    0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n    0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n  -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n];\n\nconst PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 }\n\nconst SYMBOLS = 'pnbrqkPNBRQK'\n\nconst PROMOTIONS: PieceSymbol[] = [KNIGHT, BISHOP, ROOK, QUEEN]\n\nconst RANK_1 = 7\nconst RANK_2 = 6\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1\nconst RANK_8 = 0\n\nconst SIDES = {\n  [KING]: BITS.KSIDE_CASTLE,\n  [QUEEN]: BITS.QSIDE_CASTLE,\n}\n\nconst ROOKS = {\n  w: [\n    { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },\n    { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },\n  ],\n  b: [\n    { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },\n    { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },\n  ],\n}\n\nconst SECOND_RANK = { b: RANK_7, w: RANK_2 }\n\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square: number): number {\n  return square >> 4\n}\n\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square: number): number {\n  return square & 0xf\n}\n\nfunction isDigit(c: string): boolean {\n  return '0123456789'.indexOf(c) !== -1\n}\n\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square: number): Square {\n  const f = file(square)\n  const r = rank(square)\n  return ('abcdefgh'.substring(f, f + 1) +\n    '87654321'.substring(r, r + 1)) as Square\n}\n\nfunction swapColor(color: Color): Color {\n  return color === WHITE ? BLACK : WHITE\n}\n\nexport function validateFen(fen: string): { ok: boolean; error?: string } {\n  // 1st criterion: 6 space-seperated fields?\n  const tokens = fen.split(/\\s+/)\n  if (tokens.length !== 6) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: must contain six space-delimited fields',\n    }\n  }\n\n  // 2nd criterion: move number field is a integer value > 0?\n  const moveNumber = parseInt(tokens[5], 10)\n  if (isNaN(moveNumber) || moveNumber <= 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: move number must be a positive integer',\n    }\n  }\n\n  // 3rd criterion: half move counter is an integer >= 0?\n  const halfMoves = parseInt(tokens[4], 10)\n  if (isNaN(halfMoves) || halfMoves < 0) {\n    return {\n      ok: false,\n      error:\n        'Invalid FEN: half move counter number must be a non-negative integer',\n    }\n  }\n\n  // 4th criterion: 4th field is a valid e.p.-string?\n  if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n    return { ok: false, error: 'Invalid FEN: en-passant square is invalid' }\n  }\n\n  // 5th criterion: 3th field is a valid castle-string?\n  if (/[^kKqQ-]/.test(tokens[2])) {\n    return { ok: false, error: 'Invalid FEN: castling availability is invalid' }\n  }\n\n  // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n  if (!/^(w|b)$/.test(tokens[1])) {\n    return { ok: false, error: 'Invalid FEN: side-to-move is invalid' }\n  }\n\n  // 7th criterion: 1st field contains 8 rows?\n  const rows = tokens[0].split('/')\n  if (rows.length !== 8) {\n    return {\n      ok: false,\n      error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\",\n    }\n  }\n\n  // 8th criterion: every row is valid?\n  for (let i = 0; i < rows.length; i++) {\n    // check for right sum of fields AND not two numbers in succession\n    let sumFields = 0\n    let previousWasNumber = false\n\n    for (let k = 0; k < rows[i].length; k++) {\n      if (isDigit(rows[i][k])) {\n        if (previousWasNumber) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (consecutive number)',\n          }\n        }\n        sumFields += parseInt(rows[i][k], 10)\n        previousWasNumber = true\n      } else {\n        if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (invalid piece)',\n          }\n        }\n        sumFields += 1\n        previousWasNumber = false\n      }\n    }\n    if (sumFields !== 8) {\n      return {\n        ok: false,\n        error: 'Invalid FEN: piece data is invalid (too many squares in rank)',\n      }\n    }\n  }\n\n  // 9th criterion: is en-passant square legal?\n  if (\n    (tokens[3][1] == '3' && tokens[1] == 'w') ||\n    (tokens[3][1] == '6' && tokens[1] == 'b')\n  ) {\n    return { ok: false, error: 'Invalid FEN: illegal en-passant square' }\n  }\n\n  // 10th criterion: does chess position contain exact two kings?\n  const kings = [\n    { color: 'white', regex: /K/g },\n    { color: 'black', regex: /k/g },\n  ]\n\n  for (const { color, regex } of kings) {\n    if (!regex.test(tokens[0])) {\n      return { ok: false, error: `Invalid FEN: missing ${color} king` }\n    }\n\n    if ((tokens[0].match(regex) || []).length > 1) {\n      return { ok: false, error: `Invalid FEN: too many ${color} kings` }\n    }\n  }\n\n  // 11th criterion: are any pawns on the first or eighth rows?\n  if (\n    Array.from(rows[0] + rows[7]).some((char) => char.toUpperCase() === 'P')\n  ) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: some pawns are on the edge rows',\n    }\n  }\n\n  return { ok: true }\n}\n\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move: InternalMove, moves: InternalMove[]): string {\n  const from = move.from\n  const to = move.to\n  const piece = move.piece\n\n  let ambiguities = 0\n  let sameRank = 0\n  let sameFile = 0\n\n  for (let i = 0, len = moves.length; i < len; i++) {\n    const ambigFrom = moves[i].from\n    const ambigTo = moves[i].to\n    const ambigPiece = moves[i].piece\n\n    /*\n     * if a move of the same piece type ends on the same to square, we'll need\n     * to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n      ambiguities++\n\n      if (rank(from) === rank(ambigFrom)) {\n        sameRank++\n      }\n\n      if (file(from) === file(ambigFrom)) {\n        sameFile++\n      }\n    }\n  }\n\n  if (ambiguities > 0) {\n    if (sameRank > 0 && sameFile > 0) {\n      /*\n       * if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      return algebraic(from)\n    } else if (sameFile > 0) {\n      /*\n       * if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1)\n    } else {\n      // else use the file symbol\n      return algebraic(from).charAt(0)\n    }\n  }\n\n  return ''\n}\n\nfunction addMove(\n  moves: InternalMove[],\n  color: Color,\n  from: number,\n  to: number,\n  piece: PieceSymbol,\n  captured: PieceSymbol | undefined = undefined,\n  flags: number = BITS.NORMAL,\n) {\n  const r = rank(to)\n\n  if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n    for (let i = 0; i < PROMOTIONS.length; i++) {\n      const promotion = PROMOTIONS[i]\n      moves.push({\n        color,\n        from,\n        to,\n        piece,\n        captured,\n        promotion,\n        flags: flags | BITS.PROMOTION,\n      })\n    }\n  } else {\n    moves.push({\n      color,\n      from,\n      to,\n      piece,\n      captured,\n      flags,\n    })\n  }\n}\n\nfunction inferPieceType(san: string): PieceSymbol | undefined {\n  let pieceType = san.charAt(0)\n  if (pieceType >= 'a' && pieceType <= 'h') {\n    const matches = san.match(/[a-h]\\d.*[a-h]\\d/)\n    if (matches) {\n      return undefined\n    }\n    return PAWN\n  }\n  pieceType = pieceType.toLowerCase()\n  if (pieceType === 'o') {\n    return KING\n  }\n  return pieceType as PieceSymbol\n}\n\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move: string): string {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n}\n\nexport class Chess {\n  private _board = new Array<Piece>(128)\n  private _turn: Color = WHITE\n  private _header: Record<string, string | null> = {}\n  private _kings: Record<Color, number> = { w: EMPTY, b: EMPTY }\n  private _epSquare = -1\n  private _halfMoves = 0\n  private _moveNumber = 0\n  private _history: History[] = []\n  private _comments: Record<string, string> = {}\n  private _castling: Record<Color, number> = { w: 0, b: 0 }\n\n  private _hash = 0n\n\n  // tracks number of times a position has been seen for repetition checking\n  private _positionCount = new Map<bigint, number>()\n\n  constructor(fen = DEFAULT_POSITION, { skipValidation = false } = {}) {\n    this.load(fen, { skipValidation })\n  }\n\n  clear({ preserveHeaders = false } = {}) {\n    this._board = new Array<Piece>(128)\n    this._kings = { w: EMPTY, b: EMPTY }\n    this._turn = WHITE\n    this._castling = { w: 0, b: 0 }\n    this._epSquare = EMPTY\n    this._halfMoves = 0\n    this._moveNumber = 1\n    this._history = []\n    this._comments = {}\n    this._header = preserveHeaders ? this._header : { ...HEADER_TEMPLATE }\n    this._hash = this._computeHash()\n    this._positionCount = new Map<bigint, number>()\n\n    /*\n     * Delete the SetUp and FEN headers (if preserved), the board is empty and\n     * these headers don't make sense in this state. They'll get added later\n     * via .load() or .put()\n     */\n    this._header['SetUp'] = null\n    this._header['FEN'] = null\n  }\n\n  load(fen: string, { skipValidation = false, preserveHeaders = false } = {}) {\n    let tokens = fen.split(/\\s+/)\n\n    // append commonly omitted fen tokens\n    if (tokens.length >= 2 && tokens.length < 6) {\n      const adjustments = ['-', '-', '0', '1']\n      fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ')\n    }\n\n    tokens = fen.split(/\\s+/)\n\n    if (!skipValidation) {\n      const { ok, error } = validateFen(fen)\n      if (!ok) {\n        throw new Error(error)\n      }\n    }\n\n    const position = tokens[0]\n    let square = 0\n\n    this.clear({ preserveHeaders })\n\n    for (let i = 0; i < position.length; i++) {\n      const piece = position.charAt(i)\n\n      if (piece === '/') {\n        square += 8\n      } else if (isDigit(piece)) {\n        square += parseInt(piece, 10)\n      } else {\n        const color = piece < 'a' ? WHITE : BLACK\n        this._put(\n          { type: piece.toLowerCase() as PieceSymbol, color },\n          algebraic(square),\n        )\n        square++\n      }\n    }\n\n    this._turn = tokens[1] as Color\n\n    if (tokens[2].indexOf('K') > -1) {\n      this._castling.w |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      this._castling.w |= BITS.QSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      this._castling.b |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      this._castling.b |= BITS.QSIDE_CASTLE\n    }\n\n    this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3] as Square]\n    this._halfMoves = parseInt(tokens[4], 10)\n    this._moveNumber = parseInt(tokens[5], 10)\n\n    this._hash = this._computeHash()\n    this._updateSetup(fen)\n    this._incPositionCount()\n  }\n\n  fen({\n    forceEnpassantSquare = false,\n  }: { forceEnpassantSquare?: boolean } = {}) {\n    let empty = 0\n    let fen = ''\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i]) {\n        if (empty > 0) {\n          fen += empty\n          empty = 0\n        }\n        const { color, type: piece } = this._board[i]\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n      } else {\n        empty++\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty\n        }\n\n        if (i !== Ox88.h1) {\n          fen += '/'\n        }\n\n        empty = 0\n        i += 8\n      }\n    }\n\n    let castling = ''\n    if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n      castling += 'K'\n    }\n    if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n      castling += 'Q'\n    }\n    if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n      castling += 'k'\n    }\n    if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n      castling += 'q'\n    }\n\n    // do we have an empty castling flag?\n    castling = castling || '-'\n\n    let epSquare = '-'\n    /*\n     * only print the ep square if en passant is a valid move (pawn is present\n     * and ep capture is not pinned)\n     */\n    if (this._epSquare !== EMPTY) {\n      if (forceEnpassantSquare) {\n        epSquare = algebraic(this._epSquare)\n      } else {\n        const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16)\n        const squares = [bigPawnSquare + 1, bigPawnSquare - 1]\n\n        for (const square of squares) {\n          // is the square off the board?\n          if (square & 0x88) {\n            continue\n          }\n\n          const color = this._turn\n\n          // is there a pawn that can capture the epSquare?\n          if (\n            this._board[square]?.color === color &&\n            this._board[square]?.type === PAWN\n          ) {\n            // if the pawn makes an ep capture, does it leave its king in check?\n            this._makeMove({\n              color,\n              from: square,\n              to: this._epSquare,\n              piece: PAWN,\n              captured: PAWN,\n              flags: BITS.EP_CAPTURE,\n            })\n            const isLegal = !this._isKingAttacked(color)\n            this._undoMove()\n\n            // if ep is legal, break and set the ep square in the FEN output\n            if (isLegal) {\n              epSquare = algebraic(this._epSquare)\n              break\n            }\n          }\n        }\n      }\n    }\n\n    return [\n      fen,\n      this._turn,\n      castling,\n      epSquare,\n      this._halfMoves,\n      this._moveNumber,\n    ].join(' ')\n  }\n\n  private _pieceKey(i: number) {\n    if (!this._board[i]) {\n      return 0n\n    }\n\n    const { color, type } = this._board[i]\n\n    const colorIndex = {\n      w: 0,\n      b: 1,\n    }[color]\n\n    const typeIndex = {\n      p: 0,\n      n: 1,\n      b: 2,\n      r: 3,\n      q: 4,\n      k: 5,\n    }[type]\n\n    return PIECE_KEYS[colorIndex][typeIndex][i]\n  }\n\n  private _epKey() {\n    return this._epSquare === EMPTY ? 0n : EP_KEYS[this._epSquare & 7]\n  }\n\n  private _castlingKey() {\n    const index = (this._castling.w >> 5) | (this._castling.b >> 3)\n    return CASTLING_KEYS[index]\n  }\n\n  private _computeHash() {\n    let hash = 0n\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      if (this._board[i]) {\n        hash ^= this._pieceKey(i)\n      }\n    }\n\n    hash ^= this._epKey()\n    hash ^= this._castlingKey()\n\n    if (this._turn === 'b') {\n      hash ^= SIDE_KEY\n    }\n\n    return hash\n  }\n\n  /*\n   * Called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object. If the FEN\n   * is equal to the default position, the SetUp and FEN are deleted the setup\n   * is only updated if history.length is zero, ie moves haven't been made.\n   */\n  private _updateSetup(fen: string) {\n    if (this._history.length > 0) return\n\n    if (fen !== DEFAULT_POSITION) {\n      this._header['SetUp'] = '1'\n      this._header['FEN'] = fen\n    } else {\n      this._header['SetUp'] = null\n      this._header['FEN'] = null\n    }\n  }\n\n  reset() {\n    this.load(DEFAULT_POSITION)\n  }\n\n  get(square: Square): Piece | undefined {\n    return this._board[Ox88[square]]\n  }\n\n  findPiece(piece: Piece): Square[] {\n    const squares: Square[] = []\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      // if empty square or wrong color\n      if (!this._board[i] || this._board[i]?.color !== piece.color) {\n        continue\n      }\n\n      // check if square contains the requested piece\n      if (\n        this._board[i].color === piece.color &&\n        this._board[i].type === piece.type\n      ) {\n        squares.push(algebraic(i))\n      }\n    }\n\n    return squares\n  }\n\n  put(\n    { type, color }: { type: PieceSymbol; color: Color },\n    square: Square,\n  ): boolean {\n    if (this._put({ type, color }, square)) {\n      this._updateCastlingRights()\n      this._updateEnPassantSquare()\n      this._updateSetup(this.fen())\n      return true\n    }\n    return false\n  }\n\n  private _set(sq: number, piece: Piece) {\n    this._hash ^= this._pieceKey(sq)\n    this._board[sq] = piece\n    this._hash ^= this._pieceKey(sq)\n  }\n\n  private _put(\n    { type, color }: { type: PieceSymbol; color: Color },\n    square: Square,\n  ): boolean {\n    // check for piece\n    if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n      return false\n    }\n\n    // check for valid square\n    if (!(square in Ox88)) {\n      return false\n    }\n\n    const sq = Ox88[square]\n\n    // don't let the user place more than one king\n    if (\n      type == KING &&\n      !(this._kings[color] == EMPTY || this._kings[color] == sq)\n    ) {\n      return false\n    }\n\n    const currentPieceOnSquare = this._board[sq]\n\n    // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`\n    if (currentPieceOnSquare && currentPieceOnSquare.type === KING) {\n      this._kings[currentPieceOnSquare.color] = EMPTY\n    }\n\n    this._set(sq, { type: type as PieceSymbol, color: color as Color })\n\n    if (type === KING) {\n      this._kings[color] = sq\n    }\n\n    return true\n  }\n\n  private _clear(sq: number) {\n    this._hash ^= this._pieceKey(sq)\n    delete this._board[sq]\n  }\n\n  remove(square: Square): Piece | undefined {\n    const piece = this.get(square)\n    this._clear(Ox88[square])\n    if (piece && piece.type === KING) {\n      this._kings[piece.color] = EMPTY\n    }\n\n    this._updateCastlingRights()\n    this._updateEnPassantSquare()\n    this._updateSetup(this.fen())\n\n    return piece\n  }\n\n  private _updateCastlingRights() {\n    this._hash ^= this._castlingKey()\n\n    const whiteKingInPlace =\n      this._board[Ox88.e1]?.type === KING &&\n      this._board[Ox88.e1]?.color === WHITE\n    const blackKingInPlace =\n      this._board[Ox88.e8]?.type === KING &&\n      this._board[Ox88.e8]?.color === BLACK\n\n    if (\n      !whiteKingInPlace ||\n      this._board[Ox88.a1]?.type !== ROOK ||\n      this._board[Ox88.a1]?.color !== WHITE\n    ) {\n      this._castling.w &= ~BITS.QSIDE_CASTLE\n    }\n\n    if (\n      !whiteKingInPlace ||\n      this._board[Ox88.h1]?.type !== ROOK ||\n      this._board[Ox88.h1]?.color !== WHITE\n    ) {\n      this._castling.w &= ~BITS.KSIDE_CASTLE\n    }\n\n    if (\n      !blackKingInPlace ||\n      this._board[Ox88.a8]?.type !== ROOK ||\n      this._board[Ox88.a8]?.color !== BLACK\n    ) {\n      this._castling.b &= ~BITS.QSIDE_CASTLE\n    }\n\n    if (\n      !blackKingInPlace ||\n      this._board[Ox88.h8]?.type !== ROOK ||\n      this._board[Ox88.h8]?.color !== BLACK\n    ) {\n      this._castling.b &= ~BITS.KSIDE_CASTLE\n    }\n\n    this._hash ^= this._castlingKey()\n  }\n\n  private _updateEnPassantSquare() {\n    if (this._epSquare === EMPTY) {\n      return\n    }\n\n    const startSquare = this._epSquare + (this._turn === WHITE ? -16 : 16)\n    const currentSquare = this._epSquare + (this._turn === WHITE ? 16 : -16)\n    const attackers = [currentSquare + 1, currentSquare - 1]\n\n    if (\n      this._board[startSquare] !== null ||\n      this._board[this._epSquare] !== null ||\n      this._board[currentSquare]?.color !== swapColor(this._turn) ||\n      this._board[currentSquare]?.type !== PAWN\n    ) {\n      this._hash ^= this._epKey()\n      this._epSquare = EMPTY\n      return\n    }\n\n    const canCapture = (square: number) =>\n      !(square & 0x88) &&\n      this._board[square]?.color === this._turn &&\n      this._board[square]?.type === PAWN\n\n    if (!attackers.some(canCapture)) {\n      this._hash ^= this._epKey()\n      this._epSquare = EMPTY\n    }\n  }\n\n  private _attacked(color: Color, square: number): boolean\n  private _attacked(color: Color, square: number, verbose: false): boolean\n  private _attacked(color: Color, square: number, verbose: true): Square[]\n  private _attacked(color: Color, square: number, verbose?: boolean) {\n    const attackers: Square[] = []\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      // if empty square or wrong color\n      if (this._board[i] === undefined || this._board[i].color !== color) {\n        continue\n      }\n\n      const piece = this._board[i]\n      const difference = i - square\n\n      // skip - to/from square are the same\n      if (difference === 0) {\n        continue\n      }\n\n      const index = difference + 119\n\n      if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (\n            (difference > 0 && piece.color === WHITE) ||\n            (difference <= 0 && piece.color === BLACK)\n          ) {\n            if (!verbose) {\n              return true\n            } else {\n              attackers.push(algebraic(i))\n            }\n          }\n          continue\n        }\n\n        // if the piece is a knight or a king\n        if (piece.type === 'n' || piece.type === 'k') {\n          if (!verbose) {\n            return true\n          } else {\n            attackers.push(algebraic(i))\n            continue\n          }\n        }\n\n        const offset = RAYS[index]\n        let j = i + offset\n\n        let blocked = false\n        while (j !== square) {\n          if (this._board[j] != null) {\n            blocked = true\n            break\n          }\n          j += offset\n        }\n\n        if (!blocked) {\n          if (!verbose) {\n            return true\n          } else {\n            attackers.push(algebraic(i))\n            continue\n          }\n        }\n      }\n    }\n\n    if (verbose) {\n      return attackers\n    } else {\n      return false\n    }\n  }\n\n  attackers(square: Square, attackedBy?: Color): Square[] {\n    if (!attackedBy) {\n      return this._attacked(this._turn, Ox88[square], true)\n    } else {\n      return this._attacked(attackedBy, Ox88[square], true)\n    }\n  }\n\n  private _isKingAttacked(color: Color): boolean {\n    const square = this._kings[color]\n    return square === -1 ? false : this._attacked(swapColor(color), square)\n  }\n\n  hash(): string {\n    return this._hash.toString(16)\n  }\n\n  isAttacked(square: Square, attackedBy: Color): boolean {\n    return this._attacked(attackedBy, Ox88[square])\n  }\n\n  isCheck(): boolean {\n    return this._isKingAttacked(this._turn)\n  }\n\n  inCheck(): boolean {\n    return this.isCheck()\n  }\n\n  isCheckmate(): boolean {\n    return this.isCheck() && this._moves().length === 0\n  }\n\n  isStalemate(): boolean {\n    return !this.isCheck() && this._moves().length === 0\n  }\n\n  isInsufficientMaterial(): boolean {\n    /*\n     * k.b. vs k.b. (of opposite colors) with mate in 1:\n     * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n     *\n     * k.b. vs k.n. with mate in 1:\n     * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n     */\n    const pieces: Record<PieceSymbol, number> = {\n      b: 0,\n      n: 0,\n      r: 0,\n      q: 0,\n      k: 0,\n      p: 0,\n    }\n    const bishops = []\n    let numPieces = 0\n    let squareColor = 0\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      squareColor = (squareColor + 1) % 2\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      const piece = this._board[i]\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n        if (piece.type === BISHOP) {\n          bishops.push(squareColor)\n        }\n        numPieces++\n      }\n    }\n\n    // k vs. k\n    if (numPieces === 2) {\n      return true\n    } else if (\n      // k vs. kn .... or .... k vs. kb\n      numPieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true\n    } else if (numPieces === pieces[BISHOP] + 2) {\n      // kb vs. kb where any number of bishops are all on the same color\n      let sum = 0\n      const len = bishops.length\n      for (let i = 0; i < len; i++) {\n        sum += bishops[i]\n      }\n      if (sum === 0 || sum === len) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  isThreefoldRepetition(): boolean {\n    return this._getPositionCount(this._hash) >= 3\n  }\n\n  isDrawByFiftyMoves(): boolean {\n    return this._halfMoves >= 100 // 50 moves per side = 100 half moves\n  }\n\n  isDraw(): boolean {\n    return (\n      this.isDrawByFiftyMoves() ||\n      this.isStalemate() ||\n      this.isInsufficientMaterial() ||\n      this.isThreefoldRepetition()\n    )\n  }\n\n  isGameOver(): boolean {\n    return this.isCheckmate() || this.isDraw()\n  }\n\n  moves(): string[]\n  moves({ square }: { square: Square }): string[]\n  moves({ piece }: { piece: PieceSymbol }): string[]\n\n  moves({ square, piece }: { square: Square; piece: PieceSymbol }): string[]\n\n  moves({ verbose, square }: { verbose: true; square?: Square }): Move[]\n  moves({ verbose, square }: { verbose: false; square?: Square }): string[]\n  moves({\n    verbose,\n    square,\n  }: {\n    verbose?: boolean\n    square?: Square\n  }): string[] | Move[]\n\n  moves({ verbose, piece }: { verbose: true; piece?: PieceSymbol }): Move[]\n  moves({ verbose, piece }: { verbose: false; piece?: PieceSymbol }): string[]\n  moves({\n    verbose,\n    piece,\n  }: {\n    verbose?: boolean\n    piece?: PieceSymbol\n  }): string[] | Move[]\n\n  moves({\n    verbose,\n    square,\n    piece,\n  }: {\n    verbose: true\n    square?: Square\n    piece?: PieceSymbol\n  }): Move[]\n  moves({\n    verbose,\n    square,\n    piece,\n  }: {\n    verbose: false\n    square?: Square\n    piece?: PieceSymbol\n  }): string[]\n  moves({\n    verbose,\n    square,\n    piece,\n  }: {\n    verbose?: boolean\n    square?: Square\n    piece?: PieceSymbol\n  }): string[] | Move[]\n\n  moves({ square, piece }: { square?: Square; piece?: PieceSymbol }): Move[]\n\n  moves({\n    verbose = false,\n    square = undefined,\n    piece = undefined,\n  }: { verbose?: boolean; square?: Square; piece?: PieceSymbol } = {}) {\n    const moves = this._moves({ square, piece })\n\n    if (verbose) {\n      return moves.map((move) => new Move(this, move))\n    } else {\n      return moves.map((move) => this._moveToSan(move, moves))\n    }\n  }\n\n  private _moves({\n    legal = true,\n    piece = undefined,\n    square = undefined,\n  }: {\n    legal?: boolean\n    piece?: PieceSymbol\n    square?: Square\n  } = {}): InternalMove[] {\n    const forSquare = square ? (square.toLowerCase() as Square) : undefined\n    const forPiece = piece?.toLowerCase()\n\n    const moves: InternalMove[] = []\n    const us = this._turn\n    const them = swapColor(us)\n\n    let firstSquare = Ox88.a8\n    let lastSquare = Ox88.h1\n    let singleSquare = false\n\n    // are we generating moves for a single square?\n    if (forSquare) {\n      // illegal square, return empty moves\n      if (!(forSquare in Ox88)) {\n        return []\n      } else {\n        firstSquare = lastSquare = Ox88[forSquare]\n        singleSquare = true\n      }\n    }\n\n    for (let from = firstSquare; from <= lastSquare; from++) {\n      // did we run off the end of the board\n      if (from & 0x88) {\n        from += 7\n        continue\n      }\n\n      // empty square or opponent, skip\n      if (!this._board[from] || this._board[from].color === them) {\n        continue\n      }\n      const { type } = this._board[from]\n\n      let to: number\n      if (type === PAWN) {\n        if (forPiece && forPiece !== type) continue\n\n        // single square, non-capturing\n        to = from + PAWN_OFFSETS[us][0]\n        if (!this._board[to]) {\n          addMove(moves, us, from, to, PAWN)\n\n          // double square\n          to = from + PAWN_OFFSETS[us][1]\n          if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n            addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN)\n          }\n        }\n\n        // pawn captures\n        for (let j = 2; j < 4; j++) {\n          to = from + PAWN_OFFSETS[us][j]\n          if (to & 0x88) continue\n\n          if (this._board[to]?.color === them) {\n            addMove(\n              moves,\n              us,\n              from,\n              to,\n              PAWN,\n              this._board[to].type,\n              BITS.CAPTURE,\n            )\n          } else if (to === this._epSquare) {\n            addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE)\n          }\n        }\n      } else {\n        if (forPiece && forPiece !== type) continue\n\n        for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n          const offset = PIECE_OFFSETS[type][j]\n          to = from\n\n          while (true) {\n            to += offset\n            if (to & 0x88) break\n\n            if (!this._board[to]) {\n              addMove(moves, us, from, to, type)\n            } else {\n              // own color, stop loop\n              if (this._board[to].color === us) break\n\n              addMove(\n                moves,\n                us,\n                from,\n                to,\n                type,\n                this._board[to].type,\n                BITS.CAPTURE,\n              )\n              break\n            }\n\n            /* break, if knight or king */\n            if (type === KNIGHT || type === KING) break\n          }\n        }\n      }\n    }\n\n    /*\n     * check for castling if we're:\n     *   a) generating all moves, or\n     *   b) doing single square move generation on the king's square\n     */\n\n    if (forPiece === undefined || forPiece === KING) {\n      if (!singleSquare || lastSquare === this._kings[us]) {\n        // king-side castling\n        if (this._castling[us] & BITS.KSIDE_CASTLE) {\n          const castlingFrom = this._kings[us]\n          const castlingTo = castlingFrom + 2\n\n          if (\n            !this._board[castlingFrom + 1] &&\n            !this._board[castlingTo] &&\n            !this._attacked(them, this._kings[us]) &&\n            !this._attacked(them, castlingFrom + 1) &&\n            !this._attacked(them, castlingTo)\n          ) {\n            addMove(\n              moves,\n              us,\n              this._kings[us],\n              castlingTo,\n              KING,\n              undefined,\n              BITS.KSIDE_CASTLE,\n            )\n          }\n        }\n\n        // queen-side castling\n        if (this._castling[us] & BITS.QSIDE_CASTLE) {\n          const castlingFrom = this._kings[us]\n          const castlingTo = castlingFrom - 2\n\n          if (\n            !this._board[castlingFrom - 1] &&\n            !this._board[castlingFrom - 2] &&\n            !this._board[castlingFrom - 3] &&\n            !this._attacked(them, this._kings[us]) &&\n            !this._attacked(them, castlingFrom - 1) &&\n            !this._attacked(them, castlingTo)\n          ) {\n            addMove(\n              moves,\n              us,\n              this._kings[us],\n              castlingTo,\n              KING,\n              undefined,\n              BITS.QSIDE_CASTLE,\n            )\n          }\n        }\n      }\n    }\n\n    /*\n     * return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal || this._kings[us] === -1) {\n      return moves\n    }\n\n    // filter out illegal moves\n    const legalMoves = []\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i])\n      if (!this._isKingAttacked(us)) {\n        legalMoves.push(moves[i])\n      }\n      this._undoMove()\n    }\n\n    return legalMoves\n  }\n\n  move(\n    move: string | { from: string; to: string; promotion?: string },\n    { strict = false }: { strict?: boolean } = {},\n  ): Move {\n    /*\n     * The move function can be called with in the following parameters:\n     *\n     * .move('Nxb7')       <- argument is a case-sensitive SAN string\n     *\n     * .move({ from: 'h7', <- argument is a move object\n     *         to :'h8',\n     *         promotion: 'q' })\n     *\n     *\n     * An optional strict argument may be supplied to tell chess.js to\n     * strictly follow the SAN specification.\n     */\n\n    let moveObj = null\n\n    if (typeof move === 'string') {\n      moveObj = this._moveFromSan(move, strict)\n    } else if (typeof move === 'object') {\n      const moves = this._moves()\n\n      // convert the pretty move object to an ugly move object\n      for (let i = 0, len = moves.length; i < len; i++) {\n        if (\n          move.from === algebraic(moves[i].from) &&\n          move.to === algebraic(moves[i].to) &&\n          (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)\n        ) {\n          moveObj = moves[i]\n          break\n        }\n      }\n    }\n\n    // failed to find move\n    if (!moveObj) {\n      if (typeof move === 'string') {\n        throw new Error(`Invalid move: ${move}`)\n      } else {\n        throw new Error(`Invalid move: ${JSON.stringify(move)}`)\n      }\n    }\n\n    /*\n     * need to make a copy of move because we can't generate SAN after the move\n     * is made\n     */\n    const prettyMove = new Move(this, moveObj)\n\n    this._makeMove(moveObj)\n    this._incPositionCount()\n    return prettyMove\n  }\n\n  private _push(move: InternalMove) {\n    this._history.push({\n      move,\n      kings: { b: this._kings.b, w: this._kings.w },\n      turn: this._turn,\n      castling: { b: this._castling.b, w: this._castling.w },\n      epSquare: this._epSquare,\n      halfMoves: this._halfMoves,\n      moveNumber: this._moveNumber,\n    })\n  }\n\n  private _movePiece(from: number, to: number) {\n    this._hash ^= this._pieceKey(from)\n\n    this._board[to] = this._board[from]\n    delete this._board[from]\n\n    this._hash ^= this._pieceKey(to)\n  }\n\n  private _makeMove(move: InternalMove) {\n    const us = this._turn\n    const them = swapColor(us)\n    this._push(move)\n\n    this._hash ^= this._epKey()\n    this._hash ^= this._castlingKey()\n\n    if (move.captured) {\n      this._hash ^= this._pieceKey(move.to)\n    }\n\n    this._movePiece(move.from, move.to)\n\n    // if ep capture, remove the captured pawn\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (this._turn === BLACK) {\n        this._clear(move.to - 16)\n      } else {\n        this._clear(move.to + 16)\n      }\n    }\n\n    // if pawn promotion, replace with new piece\n    if (move.promotion) {\n      this._clear(move.to)\n      this._set(move.to, { type: move.promotion, color: us })\n    }\n\n    // if we moved the king\n    if (this._board[move.to].type === KING) {\n      this._kings[us] = move.to\n\n      // if we castled, move the rook next to the king\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        const castlingTo = move.to - 1\n        const castlingFrom = move.to + 1\n        this._movePiece(castlingFrom, castlingTo)\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        const castlingTo = move.to + 1\n        const castlingFrom = move.to - 2\n        this._movePiece(castlingFrom, castlingTo)\n      }\n\n      // turn off castling\n      this._castling[us] = 0\n    }\n\n    // turn off castling if we move a rook\n    if (this._castling[us]) {\n      for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          this._castling[us] & ROOKS[us][i].flag\n        ) {\n          this._castling[us] ^= ROOKS[us][i].flag\n          break\n        }\n      }\n    }\n\n    // turn off castling if we capture a rook\n    if (this._castling[them]) {\n      for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          this._castling[them] & ROOKS[them][i].flag\n        ) {\n          this._castling[them] ^= ROOKS[them][i].flag\n          break\n        }\n      }\n    }\n\n    this._hash ^= this._castlingKey()\n\n    // if big pawn move, update the en passant square\n    if (move.flags & BITS.BIG_PAWN) {\n      let epSquare\n\n      if (us === BLACK) {\n        epSquare = move.to - 16\n      } else {\n        epSquare = move.to + 16\n      }\n\n      if (\n        (!((move.to - 1) & 0x88) &&\n          this._board[move.to - 1]?.type === PAWN &&\n          this._board[move.to - 1]?.color === them) ||\n        (!((move.to + 1) & 0x88) &&\n          this._board[move.to + 1]?.type === PAWN &&\n          this._board[move.to + 1]?.color === them)\n      ) {\n        this._epSquare = epSquare\n        this._hash ^= this._epKey()\n      } else {\n        this._epSquare = EMPTY\n      }\n    } else {\n      this._epSquare = EMPTY\n    }\n\n    // reset the 50 move counter if a pawn is moved or a piece is captured\n    if (move.piece === PAWN) {\n      this._halfMoves = 0\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      this._halfMoves = 0\n    } else {\n      this._halfMoves++\n    }\n\n    if (us === BLACK) {\n      this._moveNumber++\n    }\n\n    this._turn = them\n    this._hash ^= SIDE_KEY\n  }\n\n  undo(): Move | null {\n    const hash = this._hash\n    const move = this._undoMove()\n    if (move) {\n      const prettyMove = new Move(this, move)\n      this._decPositionCount(hash)\n      return prettyMove\n    }\n    return null\n  }\n\n  private _undoMove(): InternalMove | null {\n    const old = this._history.pop()\n    if (old === undefined) {\n      return null\n    }\n\n    this._hash ^= this._epKey()\n    this._hash ^= this._castlingKey()\n\n    const move = old.move\n\n    this._kings = old.kings\n    this._turn = old.turn\n    this._castling = old.castling\n    this._epSquare = old.epSquare\n    this._halfMoves = old.halfMoves\n    this._moveNumber = old.moveNumber\n\n    this._hash ^= this._epKey()\n    this._hash ^= this._castlingKey()\n    this._hash ^= SIDE_KEY\n\n    const us = this._turn\n    const them = swapColor(us)\n\n    this._movePiece(move.to, move.from)\n\n    // to undo any promotions\n    if (move.piece) {\n      this._clear(move.from)\n      this._set(move.from, { type: move.piece, color: us })\n    }\n\n    if (move.captured) {\n      if (move.flags & BITS.EP_CAPTURE) {\n        // en passant capture\n        let index: number\n        if (us === BLACK) {\n          index = move.to - 16\n        } else {\n          index = move.to + 16\n        }\n        this._set(index, { type: PAWN, color: them })\n      } else {\n        // regular capture\n        this._set(move.to, { type: move.captured, color: them })\n      }\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      let castlingTo: number, castlingFrom: number\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castlingTo = move.to + 1\n        castlingFrom = move.to - 1\n      } else {\n        castlingTo = move.to - 2\n        castlingFrom = move.to + 1\n      }\n      this._movePiece(castlingFrom, castlingTo)\n    }\n\n    return move\n  }\n\n  pgn({\n    newline = '\\n',\n    maxWidth = 0,\n  }: { newline?: string; maxWidth?: number } = {}): string {\n    /*\n     * using the specification from http://www.chessclub.com/help/PGN-spec\n     * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n     */\n\n    const result: string[] = []\n    let headerExists = false\n\n    /* add the PGN header information */\n    for (const i in this._header) {\n      /*\n       * TODO: order of enumerated properties in header object is not\n       * guaranteed, see ECMA-262 spec (section 12.6.4)\n       *\n       * By using HEADER_TEMPLATE, the order of tags should be preserved; we\n       * do have to check for null placeholders, though, and omit them\n       */\n      const headerTag = this._header[i]\n      if (headerTag) result.push(`[${i} \"${this._header[i]}\"]` + newline)\n      headerExists = true\n    }\n\n    if (headerExists && this._history.length) {\n      result.push(newline)\n    }\n\n    const appendComment = (moveString: string) => {\n      const comment = this._comments[this.fen()]\n      if (typeof comment !== 'undefined') {\n        const delimiter = moveString.length > 0 ? ' ' : ''\n        moveString = `${moveString}${delimiter}{${comment}}`\n      }\n      return moveString\n    }\n\n    // pop all of history onto reversed_history\n    const reversedHistory = []\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    const moves = []\n    let moveString = ''\n\n    // special case of a commented starting position with no moves\n    if (reversedHistory.length === 0) {\n      moves.push(appendComment(''))\n    }\n\n    // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n    while (reversedHistory.length > 0) {\n      moveString = appendComment(moveString)\n      const move = reversedHistory.pop()\n\n      // make TypeScript stop complaining about move being undefined\n      if (!move) {\n        break\n      }\n\n      // if the position started with black to move, start PGN with #. ...\n      if (!this._history.length && move.color === 'b') {\n        const prefix = `${this._moveNumber}. ...`\n        // is there a comment preceding the first move?\n        moveString = moveString ? `${moveString} ${prefix}` : prefix\n      } else if (move.color === 'w') {\n        // store the previous generated move_string if we have one\n        if (moveString.length) {\n          moves.push(moveString)\n        }\n        moveString = this._moveNumber + '.'\n      }\n\n      moveString =\n        moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }))\n      this._makeMove(move)\n    }\n\n    // are there any other leftover moves?\n    if (moveString.length) {\n      moves.push(appendComment(moveString))\n    }\n\n    // is there a result? (there ALWAYS has to be a result according to spec; see Seven Tag Roster)\n    moves.push(this._header.Result || '*')\n\n    /*\n     * history should be back to what it was before we started generating PGN,\n     * so join together moves\n     */\n    if (maxWidth === 0) {\n      return result.join('') + moves.join(' ')\n    }\n\n    // TODO (jah): huh?\n    const strip = function () {\n      if (result.length > 0 && result[result.length - 1] === ' ') {\n        result.pop()\n        return true\n      }\n      return false\n    }\n\n    // NB: this does not preserve comment whitespace.\n    const wrapComment = function (width: number, move: string) {\n      for (const token of move.split(' ')) {\n        if (!token) {\n          continue\n        }\n        if (width + token.length > maxWidth) {\n          while (strip()) {\n            width--\n          }\n          result.push(newline)\n          width = 0\n        }\n        result.push(token)\n        width += token.length\n        result.push(' ')\n        width++\n      }\n      if (strip()) {\n        width--\n      }\n      return width\n    }\n\n    // wrap the PGN output at max_width\n    let currentWidth = 0\n    for (let i = 0; i < moves.length; i++) {\n      if (currentWidth + moves[i].length > maxWidth) {\n        if (moves[i].includes('{')) {\n          currentWidth = wrapComment(currentWidth, moves[i])\n          continue\n        }\n      }\n      // if the current move will push past max_width\n      if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n        // don't end the line with whitespace\n        if (result[result.length - 1] === ' ') {\n          result.pop()\n        }\n\n        result.push(newline)\n        currentWidth = 0\n      } else if (i !== 0) {\n        result.push(' ')\n        currentWidth++\n      }\n      result.push(moves[i])\n      currentWidth += moves[i].length\n    }\n\n    return result.join('')\n  }\n\n  /**\n   * @deprecated Use `setHeader` and `getHeaders` instead. This method will return null header tags (which is not what you want)\n   */\n  header(...args: string[]): Record<string, string | null> {\n    for (let i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        this._header[args[i]] = args[i + 1]\n      }\n    }\n    return this._header\n  }\n\n  // TODO: value validation per spec\n  setHeader(key: string, value: string): Record<string, string> {\n    this._header[key] = value ?? SEVEN_TAG_ROSTER[key] ?? null\n    return this.getHeaders()\n  }\n\n  removeHeader(key: string): boolean {\n    if (key in this._header) {\n      this._header[key] = SEVEN_TAG_ROSTER[key] || null\n      return true\n    }\n    return false\n  }\n\n  // return only non-null headers (omit placemarker nulls)\n  getHeaders(): Record<string, string> {\n    const nonNullHeaders: Record<string, string> = {}\n    for (const [key, value] of Object.entries(this._header)) {\n      if (value !== null) {\n        nonNullHeaders[key] = value\n      }\n    }\n    return nonNullHeaders\n  }\n\n  loadPgn(\n    pgn: string,\n    {\n      strict = false,\n      newlineChar = '\\r?\\n',\n    }: { strict?: boolean; newlineChar?: string } = {},\n  ) {\n    // If newlineChar is not the default, replace all instances with \\n\n    if (newlineChar !== '\\r?\\n') {\n      pgn = pgn.replace(new RegExp(newlineChar, 'g'), '\\n')\n    }\n\n    const parsedPgn = parse(pgn)\n\n    // Put the board in the starting position\n    this.reset()\n\n    // parse PGN header\n    const headers = parsedPgn.headers\n    let fen = ''\n\n    for (const key in headers) {\n      // check to see user is including fen (possibly with wrong tag case)\n      if (key.toLowerCase() === 'fen') {\n        fen = headers[key]\n      }\n\n      this.header(key, headers[key])\n    }\n\n    /*\n     * the permissive parser should attempt to load a fen tag, even if it's the\n     * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n     */\n    if (!strict) {\n      if (fen) {\n        this.load(fen, { preserveHeaders: true })\n      }\n    } else {\n      /*\n       * strict parser - load the starting position indicated by [Setup '1']\n       * and [FEN position]\n       */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers)) {\n          throw new Error(\n            'Invalid PGN: FEN tag must be supplied with SetUp tag',\n          )\n        }\n        // don't clear the headers when loading\n        this.load(headers['FEN'], { preserveHeaders: true })\n      }\n    }\n\n    let node = parsedPgn.root\n\n    while (node) {\n      if (node.move) {\n        const move = this._moveFromSan(node.move, strict)\n\n        if (move == null) {\n          throw new Error(`Invalid move in PGN: ${node.move}`)\n        } else {\n          this._makeMove(move)\n          this._incPositionCount()\n        }\n      }\n\n      if (node.comment !== undefined) {\n        this._comments[this.fen()] = node.comment\n      }\n\n      node = node.variations[0]\n    }\n\n    /*\n     * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n     * the termination marker. Only do this when headers are present, but the\n     * result tag is missing\n     */\n\n    const result = parsedPgn.result\n    if (\n      result &&\n      Object.keys(this._header).length &&\n      this._header['Result'] !== result\n    ) {\n      this.setHeader('Result', result)\n    }\n  }\n\n  /*\n   * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} strict Use the strict SAN parser. It will throw errors\n   * on overly disambiguated moves (see below):\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n\n  private _moveToSan(move: InternalMove, moves: InternalMove[]): string {\n    let output = ''\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O'\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O'\n    } else {\n      if (move.piece !== PAWN) {\n        const disambiguator = getDisambiguator(move, moves)\n        output += move.piece.toUpperCase() + disambiguator\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0]\n        }\n        output += 'x'\n      }\n\n      output += algebraic(move.to)\n\n      if (move.promotion) {\n        output += '=' + move.promotion.toUpperCase()\n      }\n    }\n\n    this._makeMove(move)\n    if (this.isCheck()) {\n      if (this.isCheckmate()) {\n        output += '#'\n      } else {\n        output += '+'\n      }\n    }\n    this._undoMove()\n\n    return output\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  private _moveFromSan(move: string, strict = false): InternalMove | null {\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    let cleanMove = strippedSan(move)\n\n    if (!strict) {\n      if (cleanMove === '0-0') {\n        cleanMove = 'O-O'\n      } else if (cleanMove === '0-0-0') {\n        cleanMove = 'O-O-O'\n      }\n    }\n\n    let pieceType = inferPieceType(cleanMove)\n    let moves = this._moves({ legal: true, piece: pieceType })\n\n    // strict parser\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n        return moves[i]\n      }\n    }\n\n    // the strict parser failed\n    if (strict) {\n      return null\n    }\n\n    let piece = undefined\n    let matches = undefined\n    let from = undefined\n    let to = undefined\n    let promotion = undefined\n\n    /*\n     * The default permissive (non-strict) parser allows the user to parse\n     * non-standard chess notations. This parser is only run after the strict\n     * Standard Algebraic Notation (SAN) parser has failed.\n     *\n     * When running the permissive parser, we'll run a regex to grab the piece, the\n     * to/from square, and an optional promotion piece. This regex will\n     * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n     * f7f8q, b1c3\n     *\n     * NOTE: Some positions and moves may be ambiguous when using the permissive\n     * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n     * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n     * move). In these cases, the permissive parser will default to the most\n     * basic interpretation (which is b1c3 parsing to Nc3).\n     */\n\n    let overlyDisambiguated = false\n\n    matches = cleanMove.match(\n      /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/,\n      //     piece         from              to       promotion\n    )\n\n    if (matches) {\n      piece = matches[1]\n      from = matches[2] as Square\n      to = matches[3] as Square\n      promotion = matches[4]\n\n      if (from.length == 1) {\n        overlyDisambiguated = true\n      }\n    } else {\n      /*\n       * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n       * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n       * there is one legal knight move to e7). In this case, the value of\n       * 'from' variable will be a rank or file, not a square.\n       */\n\n      matches = cleanMove.match(\n        /([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/,\n      )\n\n      if (matches) {\n        piece = matches[1]\n        from = matches[2] as Square\n        to = matches[3] as Square\n        promotion = matches[4]\n\n        if (from.length == 1) {\n          overlyDisambiguated = true\n        }\n      }\n    }\n\n    pieceType = inferPieceType(cleanMove)\n    moves = this._moves({\n      legal: true,\n      piece: piece ? (piece as PieceSymbol) : pieceType,\n    })\n\n    if (!to) {\n      return null\n    }\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (!from) {\n        // if there is no from square, it could be just 'x' missing from a capture\n        if (\n          cleanMove ===\n          strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')\n        ) {\n          return moves[i]\n        }\n        // hand-compare move properties with the results from our permissive regex\n      } else if (\n        (!piece || piece.toLowerCase() == moves[i].piece) &&\n        Ox88[from] == moves[i].from &&\n        Ox88[to] == moves[i].to &&\n        (!promotion || promotion.toLowerCase() == moves[i].promotion)\n      ) {\n        return moves[i]\n      } else if (overlyDisambiguated) {\n        /*\n         * SPECIAL CASE: we parsed a move string that may have an unneeded\n         * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n         */\n\n        const square = algebraic(moves[i].from)\n        if (\n          (!piece || piece.toLowerCase() == moves[i].piece) &&\n          Ox88[to] == moves[i].to &&\n          (from == square[0] || from == square[1]) &&\n          (!promotion || promotion.toLowerCase() == moves[i].promotion)\n        ) {\n          return moves[i]\n        }\n      }\n    }\n\n    return null\n  }\n\n  ascii(): string {\n    let s = '   +------------------------+\\n'\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // display the rank\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |'\n      }\n\n      if (this._board[i]) {\n        const piece = this._board[i].type\n        const color = this._board[i].color\n        const symbol =\n          color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n        s += ' ' + symbol + ' '\n      } else {\n        s += ' . '\n      }\n\n      if ((i + 1) & 0x88) {\n        s += '|\\n'\n        i += 8\n      }\n    }\n    s += '   +------------------------+\\n'\n    s += '     a  b  c  d  e  f  g  h'\n\n    return s\n  }\n\n  perft(depth: number): number {\n    const moves = this._moves({ legal: false })\n    let nodes = 0\n    const color = this._turn\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i])\n      if (!this._isKingAttacked(color)) {\n        if (depth - 1 > 0) {\n          nodes += this.perft(depth - 1)\n        } else {\n          nodes++\n        }\n      }\n      this._undoMove()\n    }\n\n    return nodes\n  }\n\n  turn(): Color {\n    return this._turn\n  }\n\n  board(): ({ square: Square; type: PieceSymbol; color: Color } | null)[][] {\n    const output = []\n    let row = []\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i] == null) {\n        row.push(null)\n      } else {\n        row.push({\n          square: algebraic(i),\n          type: this._board[i].type,\n          color: this._board[i].color,\n        })\n      }\n      if ((i + 1) & 0x88) {\n        output.push(row)\n        row = []\n        i += 8\n      }\n    }\n\n    return output\n  }\n\n  squareColor(square: Square): 'light' | 'dark' | null {\n    if (square in Ox88) {\n      const sq = Ox88[square]\n      return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark'\n    }\n\n    return null\n  }\n\n  history(): string[]\n  history({ verbose }: { verbose: true }): Move[]\n  history({ verbose }: { verbose: false }): string[]\n  history({ verbose }: { verbose: boolean }): string[] | Move[]\n  history({ verbose = false }: { verbose?: boolean } = {}) {\n    const reversedHistory = []\n    const moveHistory = []\n\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    while (true) {\n      const move = reversedHistory.pop()\n      if (!move) {\n        break\n      }\n\n      if (verbose) {\n        moveHistory.push(new Move(this, move))\n      } else {\n        moveHistory.push(this._moveToSan(move, this._moves()))\n      }\n      this._makeMove(move)\n    }\n\n    return moveHistory\n  }\n\n  /*\n   * Keeps track of position occurrence counts for the purpose of repetition\n   * checking. Old positions are removed from the map if their counts are reduced to 0.\n   */\n  private _getPositionCount(hash: bigint): number {\n    return this._positionCount.get(hash) ?? 0\n  }\n\n  private _incPositionCount() {\n    this._positionCount.set(\n      this._hash,\n      (this._positionCount.get(this._hash) ?? 0) + 1,\n    )\n  }\n\n  private _decPositionCount(hash: bigint) {\n    const currentCount = this._positionCount.get(hash) ?? 0\n\n    if (currentCount === 1) {\n      this._positionCount.delete(hash)\n    } else {\n      this._positionCount.set(hash, currentCount - 1)\n    }\n  }\n\n  private _pruneComments() {\n    const reversedHistory = []\n    const currentComments: Record<string, string> = {}\n\n    const copyComment = (fen: string) => {\n      if (fen in this._comments) {\n        currentComments[fen] = this._comments[fen]\n      }\n    }\n\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    copyComment(this.fen())\n\n    while (true) {\n      const move = reversedHistory.pop()\n      if (!move) {\n        break\n      }\n      this._makeMove(move)\n      copyComment(this.fen())\n    }\n    this._comments = currentComments\n  }\n\n  getComment(): string {\n    return this._comments[this.fen()]\n  }\n\n  setComment(comment: string) {\n    this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']')\n  }\n\n  /**\n   * @deprecated Renamed to `removeComment` for consistency\n   */\n  deleteComment(): string {\n    return this.removeComment()\n  }\n\n  removeComment(): string {\n    const comment = this._comments[this.fen()]\n    delete this._comments[this.fen()]\n    return comment\n  }\n\n  getComments(): { fen: string; comment: string }[] {\n    this._pruneComments()\n    return Object.keys(this._comments).map((fen: string) => {\n      return { fen: fen, comment: this._comments[fen] }\n    })\n  }\n\n  /**\n   * @deprecated Renamed to `removeComments` for consistency\n   */\n  deleteComments(): { fen: string; comment: string }[] {\n    return this.removeComments()\n  }\n\n  removeComments(): { fen: string; comment: string }[] {\n    this._pruneComments()\n    return Object.keys(this._comments).map((fen) => {\n      const comment = this._comments[fen]\n      delete this._comments[fen]\n      return { fen: fen, comment: comment }\n    })\n  }\n\n  setCastlingRights(\n    color: Color,\n    rights: Partial<Record<typeof KING | typeof QUEEN, boolean>>,\n  ): boolean {\n    for (const side of [KING, QUEEN] as const) {\n      if (rights[side] !== undefined) {\n        if (rights[side]) {\n          this._castling[color] |= SIDES[side]\n        } else {\n          this._castling[color] &= ~SIDES[side]\n        }\n      }\n    }\n\n    this._updateCastlingRights()\n    const result = this.getCastlingRights(color)\n\n    return (\n      (rights[KING] === undefined || rights[KING] === result[KING]) &&\n      (rights[QUEEN] === undefined || rights[QUEEN] === result[QUEEN])\n    )\n  }\n\n  getCastlingRights(color: Color): { [KING]: boolean; [QUEEN]: boolean } {\n    return {\n      [KING]: (this._castling[color] & SIDES[KING]) !== 0,\n      [QUEEN]: (this._castling[color] & SIDES[QUEEN]) !== 0,\n    }\n  }\n\n  moveNumber(): number {\n    return this._moveNumber\n  }\n}\n"],"mappings":"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E,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACjD,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAG,CAAC,EAAE,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAChD,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EACjD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,CAC/C;AAED;AACA,MAAMC,IAAI,GAAG,CACV,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAC5D,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAG,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAC5D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,EAAE,EAAC,CAAC,EAAE,EAAG,CAAC,EAAG,CAAC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}